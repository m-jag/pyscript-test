// ⚠️ This file is an artifact: DO NOT MODIFY
export default {
  "pyscript": {
    "__init__.py": "# Some notes about the naming conventions and the relationship between various\n# similar-but-different names.\n#\n# import pyscript\n#     this package contains the main user-facing API offered by pyscript. All\n#     the names which are supposed be used by end users should be made\n#     available in pyscript/__init__.py (i.e., this file)\n#\n# import _pyscript\n#     this is an internal module implemented in JS. It is used internally by\n#     the pyscript package, end users should not use it directly. For its\n#     implementation, grep for `interpreter.registerJsModule(\"_pyscript\",\n#     ...)` in core.js\n#\n# import js\n#     this is the JS globalThis, as exported by pyodide and/or micropython's\n#     FFIs. As such, it contains different things in the main thread or in a\n#     worker.\n#\n# import pyscript.magic_js\n#     this submodule abstracts away some of the differences between the main\n#     thread and the worker. In particular, it defines `window` and `document`\n#     in such a way that these names work in both cases: in the main thread,\n#     they are the \"real\" objects, in the worker they are proxies which work\n#     thanks to coincident.\n#\n# from pyscript import window, document\n#     these are just the window and document objects as defined by\n#     pyscript.magic_js. This is the blessed way to access them from pyscript,\n#     as it works transparently in both the main thread and worker cases.\n\nfrom polyscript import lazy_py_modules as py_import\nfrom pyscript.display import HTML, display\nfrom pyscript.fetch import fetch\nfrom pyscript.magic_js import (\n    RUNNING_IN_WORKER,\n    PyWorker,\n    config,\n    current_target,\n    document,\n    js_import,\n    js_modules,\n    sync,\n    window,\n)\nfrom pyscript.storage import Storage, storage\nfrom pyscript.websocket import WebSocket\n\nif not RUNNING_IN_WORKER:\n    from pyscript.workers import create_named_worker, workers\n\ntry:\n    from pyscript.event_handling import when\nexcept:\n    # TODO: should we remove this? Or at the very least, we should capture\n    # the traceback otherwise it's very hard to debug\n    from pyscript.util import NotSupported\n\n    when = NotSupported(\n        \"pyscript.when\", \"pyscript.when currently not available with this interpreter\"\n    )\n",
    "display.py": "import base64\nimport html\nimport io\nimport re\n\nfrom pyscript.magic_js import current_target, document, window\n\n_MIME_METHODS = {\n    \"savefig\": \"image/png\",\n    \"_repr_javascript_\": \"application/javascript\",\n    \"_repr_json_\": \"application/json\",\n    \"_repr_latex\": \"text/latex\",\n    \"_repr_png_\": \"image/png\",\n    \"_repr_jpeg_\": \"image/jpeg\",\n    \"_repr_pdf_\": \"application/pdf\",\n    \"_repr_svg_\": \"image/svg+xml\",\n    \"_repr_markdown_\": \"text/markdown\",\n    \"_repr_html_\": \"text/html\",\n    \"__repr__\": \"text/plain\",\n}\n\n\ndef _render_image(mime, value, meta):\n    # If the image value is using bytes we should convert it to base64\n    # otherwise it will return raw bytes and the browser will not be able to\n    # render it.\n    if isinstance(value, bytes):\n        value = base64.b64encode(value).decode(\"utf-8\")\n\n    # This is the pattern of base64 strings\n    base64_pattern = re.compile(\n        r\"^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$\"\n    )\n    # If value doesn't match the base64 pattern we should encode it to base64\n    if len(value) > 0 and not base64_pattern.match(value):\n        value = base64.b64encode(value.encode(\"utf-8\")).decode(\"utf-8\")\n\n    data = f\"data:{mime};charset=utf-8;base64,{value}\"\n    attrs = \" \".join(['{k}=\"{v}\"' for k, v in meta.items()])\n    return f'<img src=\"{data}\" {attrs}></img>'\n\n\ndef _identity(value, meta):\n    return value\n\n\n_MIME_RENDERERS = {\n    \"text/plain\": html.escape,\n    \"text/html\": _identity,\n    \"image/png\": lambda value, meta: _render_image(\"image/png\", value, meta),\n    \"image/jpeg\": lambda value, meta: _render_image(\"image/jpeg\", value, meta),\n    \"image/svg+xml\": _identity,\n    \"application/json\": _identity,\n    \"application/javascript\": lambda value, meta: f\"<script>{value}<\\\\/script>\",\n}\n\n\nclass HTML:\n    \"\"\"\n    Wrap a string so that display() can render it as plain HTML\n    \"\"\"\n\n    def __init__(self, html):\n        self._html = html\n\n    def _repr_html_(self):\n        return self._html\n\n\ndef _eval_formatter(obj, print_method):\n    \"\"\"\n    Evaluates a formatter method.\n    \"\"\"\n    if print_method == \"__repr__\":\n        return repr(obj)\n    elif hasattr(obj, print_method):\n        if print_method == \"savefig\":\n            buf = io.BytesIO()\n            obj.savefig(buf, format=\"png\")\n            buf.seek(0)\n            return base64.b64encode(buf.read()).decode(\"utf-8\")\n        return getattr(obj, print_method)()\n    elif print_method == \"_repr_mimebundle_\":\n        return {}, {}\n    return None\n\n\ndef _format_mime(obj):\n    \"\"\"\n    Formats object using _repr_x_ methods.\n    \"\"\"\n    if isinstance(obj, str):\n        return html.escape(obj), \"text/plain\"\n\n    mimebundle = _eval_formatter(obj, \"_repr_mimebundle_\")\n    if isinstance(mimebundle, tuple):\n        format_dict, _ = mimebundle\n    else:\n        format_dict = mimebundle\n\n    output, not_available = None, []\n    for method, mime_type in _MIME_METHODS.items():\n        if mime_type in format_dict:\n            output = format_dict[mime_type]\n        else:\n            output = _eval_formatter(obj, method)\n\n        if output is None:\n            continue\n        elif mime_type not in _MIME_RENDERERS:\n            not_available.append(mime_type)\n            continue\n        break\n    if output is None:\n        if not_available:\n            window.console.warn(\n                f\"Rendered object requested unavailable MIME renderers: {not_available}\"\n            )\n        output = repr(output)\n        mime_type = \"text/plain\"\n    elif isinstance(output, tuple):\n        output, meta = output\n    else:\n        meta = {}\n    return _MIME_RENDERERS[mime_type](output, meta), mime_type\n\n\ndef _write(element, value, append=False):\n    html, mime_type = _format_mime(value)\n    if html == \"\\\\n\":\n        return\n\n    if append:\n        out_element = document.createElement(\"div\")\n        element.append(out_element)\n    else:\n        out_element = element.lastElementChild\n        if out_element is None:\n            out_element = element\n\n    if mime_type in (\"application/javascript\", \"text/html\"):\n        script_element = document.createRange().createContextualFragment(html)\n        out_element.append(script_element)\n    else:\n        out_element.innerHTML = html\n\n\ndef display(*values, target=None, append=True):\n    if target is None:\n        target = current_target()\n    elif not isinstance(target, str):\n        raise TypeError(f\"target must be str or None, not {target.__class__.__name__}\")\n    elif target == \"\":\n        raise ValueError(\"Cannot have an empty target\")\n    elif target.startswith(\"#\"):\n        # note: here target is str and not None!\n        # align with @when behavior\n        target = target[1:]\n\n    element = document.getElementById(target)\n\n    # If target cannot be found on the page, a ValueError is raised\n    if element is None:\n        raise ValueError(\n            f\"Invalid selector with id={target}. Cannot be found in the page.\"\n        )\n\n    # if element is a <script type=\"py\">, it has a 'target' attribute which\n    # points to the visual element holding the displayed values. In that case,\n    # use that.\n    if element.tagName == \"SCRIPT\" and hasattr(element, \"target\"):\n        element = element.target\n\n    for v in values:\n        if not append:\n            element.replaceChildren()\n        _write(element, v, append=append)\n",
    "event_handling.py": "import inspect\n\ntry:\n    from pyodide.ffi.wrappers import add_event_listener\n\nexcept ImportError:\n\n    def add_event_listener(el, event_type, func):\n        el.addEventListener(event_type, func)\n\n\nfrom pyscript.magic_js import document\n\n\ndef when(event_type=None, selector=None):\n    \"\"\"\n    Decorates a function and passes py-* events to the decorated function\n    The events might or not be an argument of the decorated function\n    \"\"\"\n\n    def decorator(func):\n        if isinstance(selector, str):\n            elements = document.querySelectorAll(selector)\n        else:\n            # TODO: This is a hack that will be removed when pyscript becomes a package\n            #       and we can better manage the imports without circular dependencies\n            from pyweb import pydom\n\n            if isinstance(selector, pydom.Element):\n                elements = [selector._js]\n            elif isinstance(selector, pydom.ElementCollection):\n                elements = [el._js for el in selector]\n            else:\n                raise ValueError(\n                    f\"Invalid selector: {selector}. Selector must\"\n                    \" be a string, a pydom.Element or a pydom.ElementCollection.\"\n                )\n        try:\n            sig = inspect.signature(func)\n            # Function doesn't receive events\n            if not sig.parameters:\n\n                def wrapper(*args, **kwargs):\n                    func()\n\n            else:\n                wrapper = func\n\n        except AttributeError:\n            # TODO: this is very ugly hack to get micropython working because inspect.signature\n            #       doesn't exist, but we need to actually properly replace inspect.signature.\n            #       It may be actually better to not try any magic for now and raise the error\n            def wrapper(*args, **kwargs):\n                try:\n                    return func(*args, **kwargs)\n                except TypeError as e:\n                    if \"takes\" in str(e) and \"positional arguments\" in str(e):\n                        return func()\n\n                    raise\n\n        for el in elements:\n            add_event_listener(el, event_type, wrapper)\n\n        return func\n\n    return decorator\n",
    "fetch.py": "import json\n\nimport js\nfrom pyscript.util import as_bytearray\n\n\n### wrap the response to grant Pythonic results\nclass _Response:\n    def __init__(self, response):\n        self._response = response\n\n    # grant access to response.ok and other fields\n    def __getattr__(self, attr):\n        return getattr(self._response, attr)\n\n    # exposed methods with Pythonic results\n    async def arrayBuffer(self):\n        buffer = await self._response.arrayBuffer()\n        # works in Pyodide\n        if hasattr(buffer, \"to_py\"):\n            return buffer.to_py()\n        # shims in MicroPython\n        return memoryview(as_bytearray(buffer))\n\n    async def blob(self):\n        return await self._response.blob()\n\n    async def bytearray(self):\n        buffer = await self._response.arrayBuffer()\n        return as_bytearray(buffer)\n\n    async def json(self):\n        return json.loads(await self.text())\n\n    async def text(self):\n        return await self._response.text()\n\n\n### allow direct await to _Response methods\nclass _DirectResponse:\n    @staticmethod\n    def setup(promise, response):\n        promise._response = _Response(response)\n        return promise._response\n\n    def __init__(self, promise):\n        self._promise = promise\n        promise._response = None\n        promise.arrayBuffer = self.arrayBuffer\n        promise.blob = self.blob\n        promise.bytearray = self.bytearray\n        promise.json = self.json\n        promise.text = self.text\n\n    async def _response(self):\n        if not self._promise._response:\n            await self._promise\n        return self._promise._response\n\n    async def arrayBuffer(self):\n        response = await self._response()\n        return await response.arrayBuffer()\n\n    async def blob(self):\n        response = await self._response()\n        return await response.blob()\n\n    async def bytearray(self):\n        response = await self._response()\n        return await response.bytearray()\n\n    async def json(self):\n        response = await self._response()\n        return await response.json()\n\n    async def text(self):\n        response = await self._response()\n        return await response.text()\n\n\ndef fetch(url, **kw):\n    # workaround Pyodide / MicroPython dict <-> js conversion\n    options = js.JSON.parse(json.dumps(kw))\n    awaited = lambda response, *args: _DirectResponse.setup(promise, response)\n    promise = js.fetch(url, options).then(awaited)\n    _DirectResponse(promise)\n    return promise\n",
    "ffi.py": "try:\n    import js\n    from pyodide.ffi import create_proxy as _cp\n    from pyodide.ffi import to_js as _py_tjs\n\n    from_entries = js.Object.fromEntries\n\n    def _tjs(value, **kw):\n        if not hasattr(kw, \"dict_converter\"):\n            kw[\"dict_converter\"] = from_entries\n        return _py_tjs(value, **kw)\n\nexcept:\n    from jsffi import create_proxy as _cp\n    from jsffi import to_js as _tjs\n\ncreate_proxy = _cp\nto_js = _tjs\n",
    "flatted.py": "# https://www.npmjs.com/package/flatted\n\nimport json as _json\n\n\nclass _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\n\n\nclass _String:\n    def __init__(self, value):\n        self.value = value\n\n\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys\n\n\ndef _object_keys(value):\n    keys = []\n    for key in value:\n        keys.append(key)\n    return keys\n\n\ndef _is_array(value):\n    return isinstance(value, list) or isinstance(value, tuple)\n\n\ndef _is_object(value):\n    return isinstance(value, dict)\n\n\ndef _is_string(value):\n    return isinstance(value, str)\n\n\ndef _index(known, input, value):\n    input.append(value)\n    index = str(len(input) - 1)\n    known.key.append(value)\n    known.value.append(index)\n    return index\n\n\ndef _loop(keys, input, known, output):\n    for key in keys:\n        value = output[key]\n        if isinstance(value, _String):\n            _ref(key, input[int(value.value)], input, known, output)\n\n    return output\n\n\ndef _ref(key, value, input, known, output):\n    if _is_array(value) and not value in known:\n        known.append(value)\n        value = _loop(_array_keys(value), input, known, value)\n    elif _is_object(value) and not value in known:\n        known.append(value)\n        value = _loop(_object_keys(value), input, known, value)\n\n    output[key] = value\n\n\ndef _relate(known, input, value):\n    if _is_string(value) or _is_array(value) or _is_object(value):\n        try:\n            return known.value[known.key.index(value)]\n        except:\n            return _index(known, input, value)\n\n    return value\n\n\ndef _transform(known, input, value):\n    if _is_array(value):\n        output = []\n        for val in value:\n            output.append(_relate(known, input, val))\n        return output\n\n    if _is_object(value):\n        obj = {}\n        for key in value:\n            obj[key] = _relate(known, input, value[key])\n        return obj\n\n    return value\n\n\ndef _wrap(value):\n    if _is_string(value):\n        return _String(value)\n\n    if _is_array(value):\n        i = 0\n        for val in value:\n            value[i] = _wrap(val)\n            i += 1\n\n    elif _is_object(value):\n        for key in value:\n            value[key] = _wrap(value[key])\n\n    return value\n\n\ndef parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:\n            input.append(value)\n\n    value = input[0]\n\n    if _is_array(value):\n        return _loop(_array_keys(value), input, [value], value)\n\n    if _is_object(value):\n        return _loop(_object_keys(value), input, [value], value)\n\n    return value\n\n\ndef stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)\n",
    "magic_js.py": "import json\nimport sys\n\nimport js as globalThis\nfrom polyscript import config as _config\nfrom polyscript import js_modules\nfrom pyscript.util import NotSupported\n\nRUNNING_IN_WORKER = not hasattr(globalThis, \"document\")\n\nconfig = json.loads(globalThis.JSON.stringify(_config))\n\n\n# allow `from pyscript.js_modules.xxx import yyy`\nclass JSModule:\n    def __init__(self, name):\n        self.name = name\n\n    def __getattr__(self, field):\n        # avoid pyodide looking for non existent fields\n        if not field.startswith(\"_\"):\n            return getattr(getattr(js_modules, self.name), field)\n\n\n# generate N modules in the system that will proxy the real value\nfor name in globalThis.Reflect.ownKeys(js_modules):\n    sys.modules[f\"pyscript.js_modules.{name}\"] = JSModule(name)\nsys.modules[\"pyscript.js_modules\"] = js_modules\n\nif RUNNING_IN_WORKER:\n    import polyscript\n\n    PyWorker = NotSupported(\n        \"pyscript.PyWorker\",\n        \"pyscript.PyWorker works only when running in the main thread\",\n    )\n\n    try:\n        globalThis.SharedArrayBuffer.new(4)\n        import js\n\n        window = polyscript.xworker.window\n        document = window.document\n        js.document = document\n        # this is the same as js_import on main and it lands modules on main\n        js_import = window.Function(\n            \"return (...urls) => Promise.all(urls.map((url) => import(url)))\"\n        )()\n    except:\n        globalThis.console.debug(\"SharedArrayBuffer is not available\")\n        # in this scenario none of the utilities would work\n        # as expected so we better export these as NotSupported\n        window = NotSupported(\n            \"pyscript.window\",\n            \"pyscript.window in workers works only via SharedArrayBuffer\",\n        )\n        document = NotSupported(\n            \"pyscript.document\",\n            \"pyscript.document in workers works only via SharedArrayBuffer\",\n        )\n\n    sync = polyscript.xworker.sync\n\n    # in workers the display does not have a default ID\n    # but there is a sync utility from xworker\n    def current_target():\n        return polyscript.target\n\nelse:\n    import _pyscript\n    from _pyscript import PyWorker, js_import\n\n    window = globalThis\n    document = globalThis.document\n    sync = NotSupported(\n        \"pyscript.sync\", \"pyscript.sync works only when running in a worker\"\n    )\n\n    # in MAIN the current element target exist, just use it\n    def current_target():\n        return _pyscript.target\n",
    "storage.py": "from polyscript import storage as _storage\nfrom pyscript.flatted import parse as _parse\nfrom pyscript.flatted import stringify as _stringify\n\n\n# convert a Python value into an IndexedDB compatible entry\ndef _to_idb(value):\n    if value is None:\n        return _stringify([\"null\", 0])\n    if isinstance(value, (bool, float, int, str, list, dict, tuple)):\n        return _stringify([\"generic\", value])\n    if isinstance(value, bytearray):\n        return _stringify([\"bytearray\", [v for v in value]])\n    if isinstance(value, memoryview):\n        return _stringify([\"memoryview\", [v for v in value]])\n    raise TypeError(f\"Unexpected value: {value}\")\n\n\n# convert an IndexedDB compatible entry into a Python value\ndef _from_idb(value):\n    (\n        kind,\n        result,\n    ) = _parse(value)\n    if kind == \"null\":\n        return None\n    if kind == \"generic\":\n        return result\n    if kind == \"bytearray\":\n        return bytearray(result)\n    if kind == \"memoryview\":\n        return memoryview(bytearray(result))\n    return value\n\n\nclass Storage(dict):\n    def __init__(self, store):\n        super().__init__({k: _from_idb(v) for k, v in store.entries()})\n        self.__store__ = store\n\n    def __delitem__(self, attr):\n        self.__store__.delete(attr)\n        super().__delitem__(attr)\n\n    def __setitem__(self, attr, value):\n        self.__store__.set(attr, _to_idb(value))\n        super().__setitem__(attr, value)\n\n    def clear(self):\n        self.__store__.clear()\n        super().clear()\n\n    async def sync(self):\n        await self.__store__.sync()\n\n\nasync def storage(name=\"\", storage_class=Storage):\n    if not name:\n        raise ValueError(\"The storage name must be defined\")\n    return storage_class(await _storage(f\"@pyscript/{name}\"))\n",
    "util.py": "import js\n\n\ndef as_bytearray(buffer):\n    ui8a = js.Uint8Array.new(buffer)\n    size = ui8a.length\n    ba = bytearray(size)\n    for i in range(0, size):\n        ba[i] = ui8a[i]\n    return ba\n\n\nclass NotSupported:\n    \"\"\"\n    Small helper that raises exceptions if you try to get/set any attribute on\n    it.\n    \"\"\"\n\n    def __init__(self, name, error):\n        object.__setattr__(self, \"name\", name)\n        object.__setattr__(self, \"error\", error)\n\n    def __repr__(self):\n        return f\"<NotSupported {self.name} [{self.error}]>\"\n\n    def __getattr__(self, attr):\n        raise AttributeError(self.error)\n\n    def __setattr__(self, attr, value):\n        raise AttributeError(self.error)\n\n    def __call__(self, *args):\n        raise TypeError(self.error)\n",
    "web": {
      "__init__.py": "from . import elements\n\n# Ugly trick to hide the dom module in the web package since we want the module\n# to allow querying right away.\nfrom .dom import dom\n",
      "dom.py": "from pyscript import document\nfrom pyscript.web.elements import Element, ElementCollection\n\n\nclass PyDom:\n    # Add objects we want to expose to the DOM namespace since this class instance is being\n    # remapped as \"the module\" itself\n    ElementCollection = ElementCollection\n\n    def __init__(self):\n        self._js = document\n\n        self.body = Element(document.body)\n        self.head = Element(document.head)\n\n    def __getitem__(self, key):\n        elements = self._js.querySelectorAll(key)\n        return ElementCollection([Element(el) for el in elements])\n\n\ndom = PyDom()\n",
      "elements.py": "import inspect\nimport sys\n\ntry:\n    from typing import Any\nexcept ImportError:\n    Any = \"Any\"\n\ntry:\n    import warnings\nexcept ImportError:\n    # TODO: For now it probably means we are in MicroPython. We should figure\n    # out the \"right\" way to handle this. For now we just ignore the warning\n    # and logging to console\n    class warnings:\n        @staticmethod\n        def warn(*args, **kwargs):\n            print(\"WARNING: \", *args, **kwargs)\n\n\ntry:\n    from functools import cached_property\nexcept ImportError:\n    # TODO: same comment about micropython as above\n    cached_property = property\n\ntry:\n    from pyodide.ffi import JsProxy\nexcept ImportError:\n    # TODO: same comment about micropython as above\n    def JsProxy(obj):\n        return obj\n\n\nfrom pyscript import document, window\n\n# from pyscript.web import dom as pydom\n\n#: A flag to show if MicroPython is the current Python interpreter.\nis_micropython = \"MicroPython\" in sys.version\n\n\ndef getmembers_static(cls):\n    \"\"\"Cross-interpreter implementation of inspect.getmembers_static.\"\"\"\n\n    if is_micropython:  # pragma: no cover\n        return [(name, getattr(cls, name)) for name, _ in inspect.getmembers(cls)]\n\n    return inspect.getmembers_static(cls)\n\n\nclass JSProperty:\n    \"\"\"JS property descriptor that directly maps to the property with the same\n    name in the underlying JS component.\"\"\"\n\n    def __init__(self, name: str, allow_nones: bool = False):\n        self.name = name\n        self.allow_nones = allow_nones\n\n    def __get__(self, obj, objtype=None):\n        return getattr(obj._js, self.name)\n\n    def __set__(self, obj, value):\n        if not self.allow_nones and value is None:\n            return\n        setattr(obj._js, self.name, value)\n\n\n# ------ TODO: REMOVE!!!! pydom elements\n\n\nclass BaseElement:\n    def __init__(self, js_element):\n        self._js = js_element\n        self._parent = None\n        self.style = StyleProxy(self)\n        self._proxies = {}\n\n    def __eq__(self, obj):\n        \"\"\"Check if the element is the same as the other element by comparing\n        the underlying JS element\"\"\"\n        return isinstance(obj, BaseElement) and obj._js == self._js\n\n    @property\n    def parent(self):\n        if self._parent:\n            return self._parent\n\n        if self._js.parentElement:\n            # TODO: This should actually return the correct class (== to tagName)\n            self._parent = Element(self._js.parentElement)\n\n        return self._parent\n\n    # @property\n    # def __class(self):\n    #     return self.__class__ if self.__class__ != PyDom else Element\n\n    def create(self, type_, is_child=True, classes=None, html=None, label=None):\n        js_el = document.createElement(type_)\n        element = self.__class(js_el)\n\n        if classes:\n            for class_ in classes:\n                element.add_class(class_)\n\n        if html is not None:\n            element.html = html\n\n        if label is not None:\n            element.label = label\n\n        if is_child:\n            self.append(element)\n\n        return element\n\n    def find(self, selector):\n        \"\"\"Return an ElementCollection representing all the child elements that\n        match the specified selector.\n\n        Args:\n            selector (str): A string containing a selector expression\n\n        Returns:\n            ElementCollection: A collection of elements matching the selector\n        \"\"\"\n        elements = self._js.querySelectorAll(selector)\n        if not elements:\n            return None\n        return ElementCollection([Element(el) for el in elements])\n\n\nclass Element(BaseElement):\n    @property\n    def children(self):\n        return [self.__class__(el) for el in self._js.children]\n\n    def append(self, child):\n        # TODO: this is Pyodide specific for now!!!!!!\n        # if we get passed a JSProxy Element directly we just map it to the\n        # higher level Python element\n        if inspect.isclass(JsProxy) and isinstance(child, JsProxy):\n            return self.append(Element(child))\n\n        elif isinstance(child, Element):\n            self._js.appendChild(child._js)\n\n            return child\n\n        elif isinstance(child, ElementCollection):\n            for el in child:\n                self.append(el)\n\n    # -------- Pythonic Interface to Element -------- #\n    @property\n    def html(self):\n        return self._js.innerHTML\n\n    @html.setter\n    def html(self, value):\n        self._js.innerHTML = value\n\n    @property\n    def text(self):\n        return self._js.textContent\n\n    @text.setter\n    def text(self, value):\n        self._js.textContent = value\n\n    @property\n    def content(self):\n        # TODO: This breaks with with standard template elements. Define how to best\n        #       handle this specifica use case. Just not support for now?\n        if self._js.tagName == \"TEMPLATE\":\n            warnings.warn(\n                \"Content attribute not supported for template elements.\", stacklevel=2\n            )\n            return None\n        return self._js.innerHTML\n\n    @content.setter\n    def content(self, value):\n        # TODO: (same comment as above)\n        if self._js.tagName == \"TEMPLATE\":\n            warnings.warn(\n                \"Content attribute not supported for template elements.\", stacklevel=2\n            )\n            return\n\n        display(value, target=self.id)\n\n    @property\n    def id(self):\n        return self._js.id\n\n    @id.setter\n    def id(self, value):\n        self._js.id = value\n\n    @property\n    def options(self):\n        if \"options\" in self._proxies:\n            return self._proxies[\"options\"]\n\n        if not self._js.tagName.lower() in {\"select\", \"datalist\", \"optgroup\"}:\n            raise AttributeError(\n                f\"Element {self._js.tagName} has no options attribute.\"\n            )\n        self._proxies[\"options\"] = OptionsProxy(self)\n        return self._proxies[\"options\"]\n\n    @property\n    def value(self):\n        return self._js.value\n\n    @value.setter\n    def value(self, value):\n        # in order to avoid confusion to the user, we don't allow setting the\n        # value of elements that don't have a value attribute\n        if not hasattr(self._js, \"value\"):\n            raise AttributeError(\n                f\"Element {self._js.tagName} has no value attribute. If you want to \"\n                \"force a value attribute, set it directly using the `_js.value = <value>` \"\n                \"javascript API attribute instead.\"\n            )\n        self._js.value = value\n\n    @property\n    def selected(self):\n        return self._js.selected\n\n    @selected.setter\n    def selected(self, value):\n        # in order to avoid confusion to the user, we don't allow setting the\n        # value of elements that don't have a value attribute\n        if not hasattr(self._js, \"selected\"):\n            raise AttributeError(\n                f\"Element {self._js.tagName} has no value attribute. If you want to \"\n                \"force a value attribute, set it directly using the `_js.value = <value>` \"\n                \"javascript API attribute instead.\"\n            )\n        self._js.selected = value\n\n    def clone(self, new_id=None):\n        clone = Element(self._js.cloneNode(True))\n        clone.id = new_id\n\n        return clone\n\n    def remove_class(self, classname):\n        classList = self._js.classList\n        if isinstance(classname, list):\n            classList.remove(*classname)\n        else:\n            classList.remove(classname)\n        return self\n\n    def add_class(self, classname):\n        classList = self._js.classList\n        if isinstance(classname, list):\n            classList.add(*classname)\n        else:\n            self._js.classList.add(classname)\n        return self\n\n    @property\n    def classes(self):\n        classes = self._js.classList.values()\n        return [x for x in classes]\n\n    def show_me(self):\n        self._js.scrollIntoView()\n\n    def snap(\n        self,\n        to: BaseElement | str = None,\n        width: int | None = None,\n        height: int | None = None,\n    ):\n        \"\"\"\n        Captures a snapshot of a video element. (Only available for video elements)\n\n        Inputs:\n\n            * to: element where to save the snapshot of the video frame to\n            * width: width of the image\n            * height: height of the image\n\n        Output:\n            (Element) canvas element where the video frame snapshot was drawn into\n        \"\"\"\n        if self._js.tagName != \"VIDEO\":\n            raise AttributeError(\"Snap method is only available for video Elements\")\n\n        if to is None:\n            canvas = self.create(\"canvas\")\n            if width is None:\n                width = self._js.width\n            if height is None:\n                height = self._js.height\n            canvas._js.width = width\n            canvas._js.height = height\n\n        elif isinstance(to, Element):\n            if to._js.tagName != \"CANVAS\":\n                raise TypeError(\"Element to snap to must a canvas.\")\n            canvas = to\n        elif getattr(to, \"tagName\", \"\") == \"CANVAS\":\n            canvas = Element(to)\n        elif isinstance(to, str):\n            # TODO (fpliger): This needs a better fix but doing a local import here for a quick fix\n            from pyscript.web import dom\n\n            canvas = dom[to][0]\n            if canvas._js.tagName != \"CANVAS\":\n                raise TypeError(\"Element to snap to must a be canvas.\")\n\n        canvas.draw(self, width, height)\n\n        return canvas\n\n    def download(self, filename: str = \"snapped.png\") -> None:\n        \"\"\"Download the current element (only available for canvas elements) with the filename\n        provided in input.\n\n        Inputs:\n            * filename (str): name of the file being downloaded\n\n        Output:\n            None\n        \"\"\"\n        if self._js.tagName != \"CANVAS\":\n            raise AttributeError(\n                \"The download method is only available for canvas Elements\"\n            )\n\n        link = self.create(\"a\")\n        link._js.download = filename\n        link._js.href = self._js.toDataURL()\n        link._js.click()\n\n    def draw(self, what, width, height):\n        \"\"\"Draw `what` on the current element  (only available for canvas elements).\n\n        Inputs:\n\n            * what (canvas image source): An element to draw into the context. The specification permits any canvas\n                image source, specifically, an HTMLImageElement, an SVGImageElement, an HTMLVideoElement,\n                an HTMLCanvasElement, an ImageBitmap, an OffscreenCanvas, or a VideoFrame.\n        \"\"\"\n        if self._js.tagName != \"CANVAS\":\n            raise AttributeError(\n                \"The draw method is only available for canvas Elements\"\n            )\n\n        if isinstance(what, Element):\n            what = what._js\n\n        # https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\n        self._js.getContext(\"2d\").drawImage(what, 0, 0, width, height)\n\n\nclass OptionsProxy:\n    \"\"\"This class represents the options of a select element. It\n    allows to access to add and remove options by using the `add` and `remove` methods.\n    \"\"\"\n\n    def __init__(self, element: Element) -> None:\n        self._element = element\n        if self._element._js.tagName.lower() != \"select\":\n            raise AttributeError(\n                f\"Element {self._element._js.tagName} has no options attribute.\"\n            )\n\n    def add(\n        self,\n        value: Any = None,\n        html: str = None,\n        text: str = None,\n        before: Element | int = None,\n        **kws,\n    ) -> None:\n        \"\"\"Add a new option to the select element\"\"\"\n        # create the option element and set the attributes\n        option = document.createElement(\"option\")\n        if value is not None:\n            kws[\"value\"] = value\n        if html is not None:\n            option.innerHTML = html\n        if text is not None:\n            kws[\"text\"] = text\n\n        for key, value in kws.items():\n            option.setAttribute(key, value)\n\n        if before:\n            if isinstance(before, Element):\n                before = before._js\n\n        self._element._js.add(option, before)\n\n    def remove(self, item: int) -> None:\n        \"\"\"Remove the option at the specified index\"\"\"\n        self._element._js.remove(item)\n\n    def clear(self) -> None:\n        \"\"\"Remove all the options\"\"\"\n        for i in range(len(self)):\n            self.remove(0)\n\n    @property\n    def options(self):\n        \"\"\"Return the list of options\"\"\"\n        return [Element(opt) for opt in self._element._js.options]\n\n    @property\n    def selected(self):\n        \"\"\"Return the selected option\"\"\"\n        return self.options[self._element._js.selectedIndex]\n\n    def __iter__(self):\n        yield from self.options\n\n    def __len__(self):\n        return len(self.options)\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__} (length: {len(self)}) {self.options}\"\n\n    def __getitem__(self, key):\n        return self.options[key]\n\n\nclass StyleProxy:  # (dict):\n    def __init__(self, element: Element) -> None:\n        self._element = element\n\n    @cached_property\n    def _style(self):\n        return self._element._js.style\n\n    def __getitem__(self, key):\n        return self._style.getPropertyValue(key)\n\n    def __setitem__(self, key, value):\n        self._style.setProperty(key, value)\n\n    def remove(self, key):\n        self._style.removeProperty(key)\n\n    def set(self, **kws):\n        for k, v in kws.items():\n            self._element._js.style.setProperty(k, v)\n\n    # CSS Properties\n    # Reference: https://github.com/microsoft/TypeScript/blob/main/src/lib/dom.generated.d.ts#L3799C1-L5005C2\n    # Following prperties automatically generated from the above reference using\n    # tools/codegen_css_proxy.py\n    @property\n    def visible(self):\n        return self._element._js.style.visibility\n\n    @visible.setter\n    def visible(self, value):\n        self._element._js.style.visibility = value\n\n\n# --------- END OF PYDOM STUFF ------\n\n\nclass ElementBase(Element):\n    tag = \"div\"\n\n    # GLOBAL ATTRIBUTES\n    # These are attribute that all elements have (this list is a subset of the official one)\n    # We are trying to capture the most used ones\n    accesskey = JSProperty(\"accesskey\")\n    autofocus = JSProperty(\"autofocus\")\n    autocapitalize = JSProperty(\"autocapitalize\")\n    className = JSProperty(\"className\")\n    contenteditable = JSProperty(\"contenteditable\")\n    draggable = JSProperty(\"draggable\")\n    enterkeyhint = JSProperty(\"enterkeyhint\")\n    hidden = JSProperty(\"hidden\")\n    id = JSProperty(\"id\")\n    lang = JSProperty(\"lang\")\n    nonce = JSProperty(\"nonce\")\n    part = JSProperty(\"part\")\n    popover = JSProperty(\"popover\")\n    slot = JSProperty(\"slot\")\n    spellcheck = JSProperty(\"spellcheck\")\n    tabindex = JSProperty(\"tabindex\")\n    title = JSProperty(\"title\")\n    translate = JSProperty(\"translate\")\n    virtualkeyboardpolicy = JSProperty(\"virtualkeyboardpolicy\")\n\n    def __init__(self, style=None, **kwargs):\n        super().__init__(document.createElement(self.tag))\n\n        # set all the style properties provided in input\n        if isinstance(style, dict):\n            for key, value in style.items():\n                self.style[key] = value\n        elif style is None:\n            pass\n        else:\n            raise ValueError(\n                f\"Style should be a dictionary, received {style} (type {type(style)}) instead.\"\n            )\n\n        # IMPORTANT!!! This is used to auto-harvest all input arguments and set them as properties\n        self._init_properties(**kwargs)\n\n    def _init_properties(self, **kwargs):\n        \"\"\"Set all the properties (of type JSProperties) provided in input as properties\n        of the class instance.\n\n        Args:\n            **kwargs: The properties to set\n        \"\"\"\n        # Look at all the properties of the class and see if they were provided in kwargs\n        for attr_name, attr in getmembers_static(self.__class__):\n            # For each one, actually check if it is a property of the class and set it\n            if isinstance(attr, JSProperty) and attr_name in kwargs:\n                try:\n                    setattr(self, attr_name, kwargs[attr_name])\n                except Exception as e:\n                    print(f\"Error setting {attr_name} to {kwargs[attr_name]}: {e}\")\n                    raise\n\n\nclass TextElementBase(ElementBase):\n    def __init__(self, content=None, style=None, **kwargs):\n        super().__init__(style=style, **kwargs)\n\n        # If it's an element, append the element\n        if isinstance(content, Element):\n            self.append(content)\n        # If it's a list of elements\n        elif isinstance(content, list):\n            for item in content:\n                self.append(item)\n        # If the content wasn't set just ignore\n        elif content is None:\n            pass\n        else:\n            # Otherwise, set content as the html of the element\n            self.html = content\n\n\n# IMPORTANT: For all HTML components defined below, we are not mapping all\n# available attributes, just the global and the most common ones.\n# If you need to access a specific attribute, you can always use the `_js.<attribute>`\nclass a(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"\"\"\n\n    tag = \"a\"\n\n    download = JSProperty(\"download\")\n    href = JSProperty(\"href\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    rel = JSProperty(\"rel\")\n    target = JSProperty(\"target\")\n    type = JSProperty(\"type\")\n\n\nclass abbr(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\"\"\"\n\n    tag = \"abbr\"\n\n\nclass address(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address\"\"\"\n\n    tag = \"address\"\n\n\nclass area(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area\"\"\"\n\n    tag = \"area\"\n\n    alt = JSProperty(\"alt\")\n    coords = JSProperty(\"coords\")\n    download = JSProperty(\"download\")\n    href = JSProperty(\"href\")\n    ping = JSProperty(\"ping\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    rel = JSProperty(\"rel\")\n    shape = JSProperty(\"shape\")\n    target = JSProperty(\"target\")\n\n\nclass article(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\"\"\"\n\n    tag = \"article\"\n\n\nclass aside(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside\"\"\"\n\n    tag = \"aside\"\n\n\nclass audio(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"\"\"\n\n    tag = \"audio\"\n\n    autoplay = JSProperty(\"autoplay\")\n    controls = JSProperty(\"controls\")\n    controlslist = JSProperty(\"controlslist\")\n    crossorigin = JSProperty(\"crossorigin\")\n    disableremoteplayback = JSProperty(\"disableremoteplayback\")\n    loop = JSProperty(\"loop\")\n    muted = JSProperty(\"muted\")\n    preload = JSProperty(\"preload\")\n    src = JSProperty(\"src\")\n\n\nclass b(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\"\"\"\n\n    tag = \"b\"\n\n\nclass blockquote(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\"\"\"\n\n    tag = \"blockquote\"\n\n    cite = JSProperty(\"cite\")\n\n\nclass br(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br\"\"\"\n\n    tag = \"br\"\n\n\nclass button(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"\"\"\n\n    tag = \"button\"\n\n    autofocus = JSProperty(\"autofocus\")\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    formaction = JSProperty(\"formaction\")\n    formenctype = JSProperty(\"formenctype\")\n    formmethod = JSProperty(\"formmethod\")\n    formnovalidate = JSProperty(\"formnovalidate\")\n    formtarget = JSProperty(\"formtarget\")\n    name = JSProperty(\"name\")\n    type = JSProperty(\"type\")\n    value = JSProperty(\"value\")\n\n\nclass canvas(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\"\"\"\n\n    tag = \"canvas\"\n\n    height = JSProperty(\"height\")\n    width = JSProperty(\"width\")\n\n\nclass caption(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\"\"\"\n\n    tag = \"caption\"\n\n\nclass cite(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite\"\"\"\n\n    tag = \"cite\"\n\n\nclass code(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\"\"\"\n\n    tag = \"code\"\n\n\nclass data(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data\"\"\"\n\n    tag = \"data\"\n\n    value = JSProperty(\"value\")\n\n\nclass datalist(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\"\"\"\n\n    tag = \"datalist\"\n\n\nclass dd(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\"\"\"\n\n    tag = \"dd\"\n\n\nclass del_(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\"\"\"\n\n    tag = \"del\"\n\n    cite = JSProperty(\"cite\")\n    datetime = JSProperty(\"datetime\")\n\n\nclass details(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\"\"\"\n\n    tag = \"details\"\n\n    open = JSProperty(\"open\")\n\n\nclass dialog(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\"\"\"\n\n    tag = \"dialog\"\n\n    open = JSProperty(\"open\")\n\n\nclass div(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\"\"\"\n\n    tag = \"div\"\n\n\nclass dl(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\"\"\"\n\n    tag = \"dl\"\n\n    value = JSProperty(\"value\")\n\n\nclass dt(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\"\"\"\n\n    tag = \"dt\"\n\n\nclass em(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em\"\"\"\n\n    tag = \"em\"\n\n\nclass embed(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed\"\"\"\n\n    tag = \"embed\"\n\n    height = JSProperty(\"height\")\n    src = JSProperty(\"src\")\n    type = JSProperty(\"type\")\n    width = JSProperty(\"width\")\n\n\nclass fieldset(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"\"\"\n\n    tag = \"fieldset\"\n\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    name = JSProperty(\"name\")\n\n\nclass figcaption(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption\"\"\"\n\n    tag = \"figcaption\"\n\n\nclass figure(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\"\"\"\n\n    tag = \"figure\"\n\n\nclass footer(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\"\"\"\n\n    tag = \"footer\"\n\n\nclass form(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\"\"\"\n\n    tag = \"form\"\n\n    accept_charset = JSProperty(\"accept-charset\")\n    action = JSProperty(\"action\")\n    autocapitalize = JSProperty(\"autocapitalize\")\n    autocomplete = JSProperty(\"autocomplete\")\n    enctype = JSProperty(\"enctype\")\n    name = JSProperty(\"name\")\n    method = JSProperty(\"method\")\n    nonvalidate = JSProperty(\"nonvalidate\")\n    rel = JSProperty(\"rel\")\n    target = JSProperty(\"target\")\n\n\nclass h1(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1\"\"\"\n\n    tag = \"h1\"\n\n\nclass h2(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2\"\"\"\n\n    tag = \"h2\"\n\n\nclass h3(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3\"\"\"\n\n    tag = \"h3\"\n\n\nclass h4(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4\"\"\"\n\n    tag = \"h4\"\n\n\nclass h5(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5\"\"\"\n\n    tag = \"h5\"\n\n\nclass h6(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6\"\"\"\n\n    tag = \"h6\"\n\n\nclass header(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\"\"\"\n\n    tag = \"header\"\n\n\nclass hgroup(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup\"\"\"\n\n    tag = \"hgroup\"\n\n\nclass hr(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"\"\"\n\n    tag = \"hr\"\n\n\nclass i(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\"\"\"\n\n    tag = \"i\"\n\n\nclass iframe(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\"\"\n\n    tag = \"iframe\"\n\n    allow = JSProperty(\"allow\")\n    allowfullscreen = JSProperty(\"allowfullscreen\")\n    height = JSProperty(\"height\")\n    loading = JSProperty(\"loading\")\n    name = JSProperty(\"name\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    sandbox = JSProperty(\"sandbox\")\n    src = JSProperty(\"src\")\n    srcdoc = JSProperty(\"srcdoc\")\n    width = JSProperty(\"width\")\n\n\nclass img(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"\"\"\n\n    tag = \"img\"\n\n    alt = JSProperty(\"alt\")\n    crossorigin = JSProperty(\"crossorigin\")\n    decoding = JSProperty(\"decoding\")\n    fetchpriority = JSProperty(\"fetchpriority\")\n    height = JSProperty(\"height\")\n    ismap = JSProperty(\"ismap\")\n    loading = JSProperty(\"loading\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    sizes = JSProperty(\"sizes\")\n    src = JSProperty(\"src\")\n    width = JSProperty(\"width\")\n\n\n# NOTE: Input is a reserved keyword in Python, so we use input_ instead\nclass input_(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"\"\"\n\n    tag = \"input\"\n\n    accept = JSProperty(\"accept\")\n    alt = JSProperty(\"alt\")\n    autofocus = JSProperty(\"autofocus\")\n    capture = JSProperty(\"capture\")\n    checked = JSProperty(\"checked\")\n    dirname = JSProperty(\"dirname\")\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    formaction = JSProperty(\"formaction\")\n    formenctype = JSProperty(\"formenctype\")\n    formmethod = JSProperty(\"formmethod\")\n    formnovalidate = JSProperty(\"formnovalidate\")\n    formtarget = JSProperty(\"formtarget\")\n    height = JSProperty(\"height\")\n    list = JSProperty(\"list\")\n    max = JSProperty(\"max\")\n    maxlength = JSProperty(\"maxlength\")\n    min = JSProperty(\"min\")\n    minlength = JSProperty(\"minlength\")\n    multiple = JSProperty(\"multiple\")\n    name = JSProperty(\"name\")\n    pattern = JSProperty(\"pattern\")\n    placeholder = JSProperty(\"placeholder\")\n    popovertarget = JSProperty(\"popovertarget\")\n    popovertargetaction = JSProperty(\"popovertargetaction\")\n    readonly = JSProperty(\"readonly\")\n    required = JSProperty(\"required\")\n    size = JSProperty(\"size\")\n    src = JSProperty(\"src\")\n    step = JSProperty(\"step\")\n    type = JSProperty(\"type\")\n    value = JSProperty(\"value\")\n    width = JSProperty(\"width\")\n\n\nclass ins(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins\"\"\"\n\n    tag = \"ins\"\n\n    cite = JSProperty(\"cite\")\n    datetime = JSProperty(\"datetime\")\n\n\nclass kbd(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd\"\"\"\n\n    tag = \"kbd\"\n\n\nclass label(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"\"\"\n\n    tag = \"label\"\n\n    for_ = JSProperty(\"for\")\n\n\nclass legend(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend\"\"\"\n\n    tag = \"legend\"\n\n\nclass li(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\"\"\"\n\n    tag = \"li\"\n\n    value = JSProperty(\"value\")\n\n\nclass link(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\"\"\"\n\n    tag = \"link\"\n\n    as_ = JSProperty(\"as\")\n    crossorigin = JSProperty(\"crossorigin\")\n    disabled = JSProperty(\"disabled\")\n    fetchpriority = JSProperty(\"fetchpriority\")\n    href = JSProperty(\"href\")\n    imagesizes = JSProperty(\"imagesizes\")\n    imagesrcset = JSProperty(\"imagesrcset\")\n    integrity = JSProperty(\"integrity\")\n    media = JSProperty(\"media\")\n    rel = JSProperty(\"rel\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    sizes = JSProperty(\"sizes\")\n    title = JSProperty(\"title\")\n    type = JSProperty(\"type\")\n\n\nclass main(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main\"\"\"\n\n    tag = \"main\"\n\n\nclass map_(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map\"\"\"\n\n    tag = \"map\"\n\n    name = JSProperty(\"name\")\n\n\nclass mark(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark\"\"\"\n\n    tag = \"mark\"\n\n\nclass menu(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu\"\"\"\n\n    tag = \"menu\"\n\n\nclass meter(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter\"\"\"\n\n    tag = \"meter\"\n\n    form = JSProperty(\"form\")\n    high = JSProperty(\"high\")\n    low = JSProperty(\"low\")\n    max = JSProperty(\"max\")\n    min = JSProperty(\"min\")\n    optimum = JSProperty(\"optimum\")\n    value = JSProperty(\"value\")\n\n\nclass nav(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\"\"\"\n\n    tag = \"nav\"\n\n\nclass object_(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object\"\"\"\n\n    tag = \"object\"\n\n    data = JSProperty(\"data\")\n    form = JSProperty(\"form\")\n    height = JSProperty(\"height\")\n    name = JSProperty(\"name\")\n    type = JSProperty(\"type\")\n    usemap = JSProperty(\"usemap\")\n    width = JSProperty(\"width\")\n\n\nclass ol(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\"\"\"\n\n    tag = \"ol\"\n\n    reversed = JSProperty(\"reversed\")\n    start = JSProperty(\"start\")\n    type = JSProperty(\"type\")\n\n\nclass optgroup(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup\"\"\"\n\n    tag = \"optgroup\"\n\n    disabled = JSProperty(\"disabled\")\n    label = JSProperty(\"label\")\n\n\nclass option(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\"\"\"\n\n    tag = \"option\"\n\n    disabled = JSProperty(\"value\")\n    label = JSProperty(\"label\")\n    selected = JSProperty(\"selected\")\n    value = JSProperty(\"value\")\n\n\nclass output(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output\"\"\"\n\n    tag = \"output\"\n\n    for_ = JSProperty(\"for\")\n    form = JSProperty(\"form\")\n    name = JSProperty(\"name\")\n\n\nclass p(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\"\"\"\n\n    tag = \"p\"\n\n\nclass picture(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture\"\"\"\n\n    tag = \"picture\"\n\n\nclass pre(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\"\"\"\n\n    tag = \"pre\"\n\n\nclass progress(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress\"\"\"\n\n    tag = \"progress\"\n\n    max = JSProperty(\"max\")\n    value = JSProperty(\"value\")\n\n\nclass q(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\"\"\"\n\n    tag = \"q\"\n\n    cite = JSProperty(\"cite\")\n\n\nclass s(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s\"\"\"\n\n    tag = \"s\"\n\n\nclass script(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\"\"\"\n\n    tag = \"script\"\n\n    # Let's add async manually since it's a reserved keyword in Python\n    async_ = JSProperty(\"async\")\n    blocking = JSProperty(\"blocking\")\n    crossorigin = JSProperty(\"crossorigin\")\n    defer = JSProperty(\"defer\")\n    fetchpriority = JSProperty(\"fetchpriority\")\n    integrity = JSProperty(\"integrity\")\n    nomodule = JSProperty(\"nomodule\")\n    nonce = JSProperty(\"nonce\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    src = JSProperty(\"src\")\n    type = JSProperty(\"type\")\n\n\nclass section(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"\"\"\n\n    tag = \"section\"\n\n\nclass select(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\"\"\"\n\n    tag = \"select\"\n\n\nclass small(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small\"\"\"\n\n    tag = \"small\"\n\n\nclass source(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\"\"\"\n\n    tag = \"source\"\n\n    media = JSProperty(\"media\")\n    sizes = JSProperty(\"sizes\")\n    src = JSProperty(\"src\")\n    srcset = JSProperty(\"srcset\")\n    type = JSProperty(\"type\")\n\n\nclass span(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\"\"\"\n\n    tag = \"span\"\n\n\nclass strong(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\"\"\"\n\n    tag = \"strong\"\n\n\nclass style(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style\"\"\"\n\n    tag = \"style\"\n\n    blocking = JSProperty(\"blocking\")\n    media = JSProperty(\"media\")\n    nonce = JSProperty(\"nonce\")\n    title = JSProperty(\"title\")\n\n\nclass sub(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub\"\"\"\n\n    tag = \"sub\"\n\n\nclass summary(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary\"\"\"\n\n    tag = \"summary\"\n\n\nclass sup(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup\"\"\"\n\n    tag = \"sup\"\n\n\nclass table(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\"\"\"\n\n    tag = \"table\"\n\n\nclass tbody(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\"\"\"\n\n    tag = \"tbody\"\n\n\nclass td(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"\"\"\n\n    tag = \"td\"\n\n    colspan = JSProperty(\"colspan\")\n    headers = JSProperty(\"headers\")\n    rowspan = JSProperty(\"rowspan\")\n\n\nclass template(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\"\"\"\n\n    tag = \"template\"\n\n    shadowrootmode = JSProperty(\"shadowrootmode\")\n\n\nclass textarea(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea\"\"\"\n\n    tag = \"textarea\"\n\n    autocapitalize = JSProperty(\"autocapitalize\")\n    autocomplete = JSProperty(\"autocomplete\")\n    autofocus = JSProperty(\"autofocus\")\n    cols = JSProperty(\"cols\")\n    dirname = JSProperty(\"dirname\")\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    maxlength = JSProperty(\"maxlength\")\n    minlength = JSProperty(\"minlength\")\n    name = JSProperty(\"name\")\n    placeholder = JSProperty(\"placeholder\")\n    readonly = JSProperty(\"readonly\")\n    required = JSProperty(\"required\")\n    rows = JSProperty(\"rows\")\n    spellcheck = JSProperty(\"spellcheck\")\n    wrap = JSProperty(\"wrap\")\n\n\nclass tfoot(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\"\"\"\n\n    tag = \"tfoot\"\n\n\nclass th(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\"\"\"\n\n    tag = \"th\"\n\n\nclass thead(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\"\"\"\n\n    tag = \"thead\"\n\n\nclass time(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time\"\"\"\n\n    tag = \"time\"\n\n    datetime = JSProperty(\"datetime\")\n\n\nclass title(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\"\"\"\n\n    tag = \"title\"\n\n\nclass tr(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr\"\"\"\n\n    tag = \"tr\"\n\n    abbr = JSProperty(\"abbr\")\n    colspan = JSProperty(\"colspan\")\n    headers = JSProperty(\"headers\")\n    rowspan = JSProperty(\"rowspan\")\n    scope = JSProperty(\"scope\")\n\n\nclass track(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\"\"\"\n\n    tag = \"track\"\n\n    default = JSProperty(\"default\")\n    kind = JSProperty(\"kind\")\n    label = JSProperty(\"label\")\n    src = JSProperty(\"src\")\n    srclang = JSProperty(\"srclang\")\n\n\nclass u(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u\"\"\"\n\n    tag = \"u\"\n\n\nclass ul(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\"\"\"\n\n    tag = \"ul\"\n\n\nclass var(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var\"\"\"\n\n    tag = \"var\"\n\n\nclass video(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"\"\"\n\n    tag = \"video\"\n\n    autoplay = JSProperty(\"autoplay\")\n    controls = JSProperty(\"controls\")\n    crossorigin = JSProperty(\"crossorigin\")\n    disablepictureinpicture = JSProperty(\"disablepictureinpicture\")\n    disableremoteplayback = JSProperty(\"disableremoteplayback\")\n    height = JSProperty(\"height\")\n    loop = JSProperty(\"loop\")\n    muted = JSProperty(\"muted\")\n    playsinline = JSProperty(\"playsinline\")\n    poster = JSProperty(\"poster\")\n    preload = JSProperty(\"preload\")\n    src = JSProperty(\"src\")\n    width = JSProperty(\"width\")\n\n\n# Custom Elements\nclass grid(TextElementBase):\n    tag = \"div\"\n\n    def __init__(self, layout, content=None, gap=None, **kwargs):\n        super().__init__(content, **kwargs)\n        self.style[\"display\"] = \"grid\"\n        self.style[\"grid-template-columns\"] = layout\n\n        # TODO: This should be a property\n        if not gap is None:\n            self.style[\"gap\"] = gap\n\n\nclass StyleCollection:\n    def __init__(self, collection: \"ElementCollection\") -> None:\n        self._collection = collection\n\n    def __get__(self, obj, objtype=None):\n        return obj._get_attribute(\"style\")\n\n    def __getitem__(self, key):\n        return self._collection._get_attribute(\"style\")[key]\n\n    def __setitem__(self, key, value):\n        for element in self._collection._elements:\n            element.style[key] = value\n\n    def remove(self, key):\n        for element in self._collection._elements:\n            element.style.remove(key)\n\n\nclass ElementCollection:\n    def __init__(self, elements: [Element]) -> None:\n        self._elements = elements\n        self.style = StyleCollection(self)\n\n    def __getitem__(self, key):\n        # If it's an integer we use it to access the elements in the collection\n        if isinstance(key, int):\n            return self._elements[key]\n        # If it's a slice we use it to support slice operations over the elements\n        # in the collection\n        elif isinstance(key, slice):\n            return ElementCollection(self._elements[key])\n\n        # If it's anything else (basically a string) we use it as a selector\n        # TODO: Write tests!\n        elements = self._element.querySelectorAll(key)\n        return ElementCollection([Element(el) for el in elements])\n\n    def __len__(self):\n        return len(self._elements)\n\n    def __eq__(self, obj):\n        \"\"\"Check if the element is the same as the other element by comparing\n        the underlying JS element\"\"\"\n        return isinstance(obj, ElementCollection) and obj._elements == self._elements\n\n    def _get_attribute(self, attr, index=None):\n        if index is None:\n            return [getattr(el, attr) for el in self._elements]\n\n        # As JQuery, when getting an attr, only return it for the first element\n        return getattr(self._elements[index], attr)\n\n    def _set_attribute(self, attr, value):\n        for el in self._elements:\n            setattr(el, attr, value)\n\n    @property\n    def html(self):\n        return self._get_attribute(\"html\")\n\n    @html.setter\n    def html(self, value):\n        self._set_attribute(\"html\", value)\n\n    @property\n    def value(self):\n        return self._get_attribute(\"value\")\n\n    @value.setter\n    def value(self, value):\n        self._set_attribute(\"value\", value)\n\n    @property\n    def children(self):\n        return self._elements\n\n    def __iter__(self):\n        yield from self._elements\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__} (length: {len(self._elements)}) {self._elements}\"\n",
      "media.py": "from pyodide.ffi import to_js\nfrom pyscript import window\n\n\nclass Device:\n    \"\"\"Device represents a media input or output device, such as a microphone,\n    camera, or headset.\n    \"\"\"\n\n    def __init__(self, device):\n        self._js = device\n\n    @property\n    def id(self):\n        return self._js.deviceId\n\n    @property\n    def group(self):\n        return self._js.groupId\n\n    @property\n    def kind(self):\n        return self._js.kind\n\n    @property\n    def label(self):\n        return self._js.label\n\n    def __getitem__(self, key):\n        return getattr(self, key)\n\n    @classmethod\n    async def load(cls, audio=False, video=True):\n        \"\"\"Load the device stream.\"\"\"\n        options = window.Object.new()\n        options.audio = audio\n        if isinstance(video, bool):\n            options.video = video\n        else:\n            # TODO: Think this can be simplified but need to check it on the pyodide side\n\n            # TODO: this is pyodide specific. shouldn't be!\n            options.video = window.Object.new()\n            for k in video:\n                setattr(\n                    options.video,\n                    k,\n                    to_js(video[k], dict_converter=window.Object.fromEntries),\n                )\n\n        stream = await window.navigator.mediaDevices.getUserMedia(options)\n        return stream\n\n    async def get_stream(self):\n        key = self.kind.replace(\"input\", \"\").replace(\"output\", \"\")\n        options = {key: {\"deviceId\": {\"exact\": self.id}}}\n\n        return await self.load(**options)\n\n\nasync def list_devices() -> list[dict]:\n    \"\"\"\n    Return the list of the currently available media input and output devices,\n    such as microphones, cameras, headsets, and so forth.\n\n    Output:\n\n        list(dict) - list of dictionaries representing the available media devices.\n            Each dictionary has the following keys:\n            * deviceId: a string that is an identifier for the represented device\n                that is persisted across sessions. It is un-guessable by other\n                applications and unique to the origin of the calling application.\n                It is reset when the user clears cookies (for Private Browsing, a\n                different identifier is used that is not persisted across sessions).\n\n            * groupId: a string that is a group identifier. Two devices have the same\n                group identifier if they belong to the same physical device — for\n                example a monitor with both a built-in camera and a microphone.\n\n            * kind: an enumerated value that is either \"videoinput\", \"audioinput\"\n                or \"audiooutput\".\n\n            * label: a string describing this device (for example \"External USB\n                Webcam\").\n\n    Note: the returned list will omit any devices that are blocked by the document\n    Permission Policy: microphone, camera, speaker-selection (for output devices),\n    and so on. Access to particular non-default devices is also gated by the\n    Permissions API, and the list will omit devices for which the user has not\n    granted explicit permission.\n    \"\"\"\n    # https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\n    return [\n        Device(obj) for obj in await window.navigator.mediaDevices.enumerateDevices()\n    ]\n"
    },
    "websocket.py": "import js\nfrom pyscript.util import as_bytearray\n\ncode = \"code\"\nprotocols = \"protocols\"\nreason = \"reason\"\n\n\nclass EventMessage:\n    def __init__(self, event):\n        self._event = event\n\n    def __getattr__(self, attr):\n        value = getattr(self._event, attr)\n\n        if attr == \"data\" and not isinstance(value, str):\n            if hasattr(value, \"to_py\"):\n                return value.to_py()\n            # shims in MicroPython\n            return memoryview(as_bytearray(value))\n\n        return value\n\n\nclass WebSocket(object):\n    CONNECTING = 0\n    OPEN = 1\n    CLOSING = 2\n    CLOSED = 3\n\n    def __init__(self, **kw):\n        url = kw[\"url\"]\n        if protocols in kw:\n            socket = js.WebSocket.new(url, kw[protocols])\n        else:\n            socket = js.WebSocket.new(url)\n        object.__setattr__(self, \"_ws\", socket)\n\n        for t in [\"onclose\", \"onerror\", \"onmessage\", \"onopen\"]:\n            if t in kw:\n                socket[t] = kw[t]\n\n    def __getattr__(self, attr):\n        return getattr(self._ws, attr)\n\n    def __setattr__(self, attr, value):\n        if attr == \"onmessage\":\n            self._ws[attr] = lambda e: value(EventMessage(e))\n        else:\n            self._ws[attr] = value\n\n    def close(self, **kw):\n        if code in kw and reason in kw:\n            self._ws.close(kw[code], kw[reason])\n        elif code in kw:\n            self._ws.close(kw[code])\n        else:\n            self._ws.close()\n\n    def send(self, data):\n        if isinstance(data, str):\n            self._ws.send(data)\n        else:\n            buffer = js.Uint8Array.new(len(data))\n            for pos, b in enumerate(data):\n                buffer[pos] = b\n            self._ws.send(buffer)\n",
    "workers.py": "import js as _js\nfrom polyscript import workers as _workers\n\n_get = _js.Reflect.get\n\n\ndef _set(script, name, value=\"\"):\n    script.setAttribute(name, value)\n\n\n# this solves an inconsistency between Pyodide and MicroPython\n# @see https://github.com/pyscript/pyscript/issues/2106\nclass _ReadOnlyProxy:\n    def __getitem__(self, name):\n        return _get(_workers, name)\n\n    def __getattr__(self, name):\n        return _get(_workers, name)\n\n\nworkers = _ReadOnlyProxy()\n\n\nasync def create_named_worker(src=\"\", name=\"\", config=None, type=\"py\"):\n    from json import dumps\n\n    if not src:\n        raise ValueError(\"Named workers require src\")\n\n    if not name:\n        raise ValueError(\"Named workers require a name\")\n\n    s = _js.document.createElement(\"script\")\n    s.type = type\n    s.src = src\n    _set(s, \"worker\")\n    _set(s, \"name\", name)\n\n    if config:\n        _set(s, \"config\", isinstance(config, str) and config or dumps(config))\n\n    _js.document.body.append(s)\n    return await workers[name]\n"
  },
  "pyweb": {
    "__init__.py": "from .pydom import JSProperty\nfrom .pydom import dom as pydom\n",
    "media.py": "from pyodide.ffi import to_js\nfrom pyscript import window\n\n\nclass Device:\n    \"\"\"Device represents a media input or output device, such as a microphone,\n    camera, or headset.\n    \"\"\"\n\n    def __init__(self, device):\n        self._js = device\n\n    @property\n    def id(self):\n        return self._js.deviceId\n\n    @property\n    def group(self):\n        return self._js.groupId\n\n    @property\n    def kind(self):\n        return self._js.kind\n\n    @property\n    def label(self):\n        return self._js.label\n\n    def __getitem__(self, key):\n        return getattr(self, key)\n\n    @classmethod\n    async def load(cls, audio=False, video=True):\n        \"\"\"Load the device stream.\"\"\"\n        options = window.Object.new()\n        options.audio = audio\n        if isinstance(video, bool):\n            options.video = video\n        else:\n            # TODO: Think this can be simplified but need to check it on the pyodide side\n\n            # TODO: this is pyodide specific. shouldn't be!\n            options.video = window.Object.new()\n            for k in video:\n                setattr(\n                    options.video,\n                    k,\n                    to_js(video[k], dict_converter=window.Object.fromEntries),\n                )\n\n        stream = await window.navigator.mediaDevices.getUserMedia(options)\n        return stream\n\n    async def get_stream(self):\n        key = self.kind.replace(\"input\", \"\").replace(\"output\", \"\")\n        options = {key: {\"deviceId\": {\"exact\": self.id}}}\n\n        return await self.load(**options)\n\n\nasync def list_devices() -> list[dict]:\n    \"\"\"\n    Return the list of the currently available media input and output devices,\n    such as microphones, cameras, headsets, and so forth.\n\n    Output:\n\n        list(dict) - list of dictionaries representing the available media devices.\n            Each dictionary has the following keys:\n            * deviceId: a string that is an identifier for the represented device\n                that is persisted across sessions. It is un-guessable by other\n                applications and unique to the origin of the calling application.\n                It is reset when the user clears cookies (for Private Browsing, a\n                different identifier is used that is not persisted across sessions).\n\n            * groupId: a string that is a group identifier. Two devices have the same\n                group identifier if they belong to the same physical device — for\n                example a monitor with both a built-in camera and a microphone.\n\n            * kind: an enumerated value that is either \"videoinput\", \"audioinput\"\n                or \"audiooutput\".\n\n            * label: a string describing this device (for example \"External USB\n                Webcam\").\n\n    Note: the returned list will omit any devices that are blocked by the document\n    Permission Policy: microphone, camera, speaker-selection (for output devices),\n    and so on. Access to particular non-default devices is also gated by the\n    Permissions API, and the list will omit devices for which the user has not\n    granted explicit permission.\n    \"\"\"\n    # https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\n    return [\n        Device(obj) for obj in await window.navigator.mediaDevices.enumerateDevices()\n    ]\n",
    "pydom.py": "import inspect\n\ntry:\n    from typing import Any\nexcept ImportError:\n    Any = \"Any\"\n\ntry:\n    import warnings\nexcept ImportError:\n    # TODO: For now it probably means we are in MicroPython. We should figure\n    # out the \"right\" way to handle this. For now we just ignore the warning\n    # and logging to console\n    class warnings:\n        @staticmethod\n        def warn(*args, **kwargs):\n            print(\"WARNING: \", *args, **kwargs)\n\n\ntry:\n    from functools import cached_property\nexcept ImportError:\n    # TODO: same comment about micropython as above\n    cached_property = property\n\ntry:\n    from pyodide.ffi import JsProxy\nexcept ImportError:\n    # TODO: same comment about micropython as above\n    def JsProxy(obj):\n        return obj\n\n\nfrom pyscript import display, document, window\n\nalert = window.alert\n\n\nclass JSProperty:\n    \"\"\"JS property descriptor that directly maps to the property with the same\n    name in the underlying JS component.\"\"\"\n\n    def __init__(self, name: str, allow_nones: bool = False):\n        self.name = name\n        self.allow_nones = allow_nones\n\n    def __get__(self, obj, objtype=None):\n        return getattr(obj._js, self.name)\n\n    def __set__(self, obj, value):\n        if not self.allow_nones and value is None:\n            return\n        setattr(obj._js, self.name, value)\n\n\nclass BaseElement:\n    def __init__(self, js_element):\n        self._js = js_element\n        self._parent = None\n        self.style = StyleProxy(self)\n        self._proxies = {}\n\n    def __eq__(self, obj):\n        \"\"\"Check if the element is the same as the other element by comparing\n        the underlying JS element\"\"\"\n        return isinstance(obj, BaseElement) and obj._js == self._js\n\n    @property\n    def parent(self):\n        if self._parent:\n            return self._parent\n\n        if self._js.parentElement:\n            self._parent = self.__class__(self._js.parentElement)\n\n        return self._parent\n\n    @property\n    def __class(self):\n        return self.__class__ if self.__class__ != PyDom else Element\n\n    def create(self, type_, is_child=True, classes=None, html=None, label=None):\n        js_el = document.createElement(type_)\n        element = self.__class(js_el)\n\n        if classes:\n            for class_ in classes:\n                element.add_class(class_)\n\n        if html is not None:\n            element.html = html\n\n        if label is not None:\n            element.label = label\n\n        if is_child:\n            self.append(element)\n\n        return element\n\n    def find(self, selector):\n        \"\"\"Return an ElementCollection representing all the child elements that\n        match the specified selector.\n\n        Args:\n            selector (str): A string containing a selector expression\n\n        Returns:\n            ElementCollection: A collection of elements matching the selector\n        \"\"\"\n        elements = self._js.querySelectorAll(selector)\n        if not elements:\n            return None\n        return ElementCollection([Element(el) for el in elements])\n\n\nclass Element(BaseElement):\n    @property\n    def children(self):\n        return [self.__class__(el) for el in self._js.children]\n\n    def append(self, child):\n        # TODO: this is Pyodide specific for now!!!!!!\n        # if we get passed a JSProxy Element directly we just map it to the\n        # higher level Python element\n        if inspect.isclass(JsProxy) and isinstance(child, JsProxy):\n            return self.append(Element(child))\n\n        elif isinstance(child, Element):\n            self._js.appendChild(child._js)\n\n            return child\n\n        elif isinstance(child, ElementCollection):\n            for el in child:\n                self.append(el)\n\n    # -------- Pythonic Interface to Element -------- #\n    @property\n    def html(self):\n        return self._js.innerHTML\n\n    @html.setter\n    def html(self, value):\n        self._js.innerHTML = value\n\n    @property\n    def text(self):\n        return self._js.textContent\n\n    @text.setter\n    def text(self, value):\n        self._js.textContent = value\n\n    @property\n    def content(self):\n        # TODO: This breaks with with standard template elements. Define how to best\n        #       handle this specifica use case. Just not support for now?\n        if self._js.tagName == \"TEMPLATE\":\n            warnings.warn(\n                \"Content attribute not supported for template elements.\", stacklevel=2\n            )\n            return None\n        return self._js.innerHTML\n\n    @content.setter\n    def content(self, value):\n        # TODO: (same comment as above)\n        if self._js.tagName == \"TEMPLATE\":\n            warnings.warn(\n                \"Content attribute not supported for template elements.\", stacklevel=2\n            )\n            return\n\n        display(value, target=self.id)\n\n    @property\n    def id(self):\n        return self._js.id\n\n    @id.setter\n    def id(self, value):\n        self._js.id = value\n\n    @property\n    def options(self):\n        if \"options\" in self._proxies:\n            return self._proxies[\"options\"]\n\n        if not self._js.tagName.lower() in {\"select\", \"datalist\", \"optgroup\"}:\n            raise AttributeError(\n                f\"Element {self._js.tagName} has no options attribute.\"\n            )\n        self._proxies[\"options\"] = OptionsProxy(self)\n        return self._proxies[\"options\"]\n\n    @property\n    def value(self):\n        return self._js.value\n\n    @value.setter\n    def value(self, value):\n        # in order to avoid confusion to the user, we don't allow setting the\n        # value of elements that don't have a value attribute\n        if not hasattr(self._js, \"value\"):\n            raise AttributeError(\n                f\"Element {self._js.tagName} has no value attribute. If you want to \"\n                \"force a value attribute, set it directly using the `_js.value = <value>` \"\n                \"javascript API attribute instead.\"\n            )\n        self._js.value = value\n\n    @property\n    def selected(self):\n        return self._js.selected\n\n    @selected.setter\n    def selected(self, value):\n        # in order to avoid confusion to the user, we don't allow setting the\n        # value of elements that don't have a value attribute\n        if not hasattr(self._js, \"selected\"):\n            raise AttributeError(\n                f\"Element {self._js.tagName} has no value attribute. If you want to \"\n                \"force a value attribute, set it directly using the `_js.value = <value>` \"\n                \"javascript API attribute instead.\"\n            )\n        self._js.selected = value\n\n    def clone(self, new_id=None):\n        clone = Element(self._js.cloneNode(True))\n        clone.id = new_id\n\n        return clone\n\n    def remove_class(self, classname):\n        classList = self._js.classList\n        if isinstance(classname, list):\n            classList.remove(*classname)\n        else:\n            classList.remove(classname)\n        return self\n\n    def add_class(self, classname):\n        classList = self._js.classList\n        if isinstance(classname, list):\n            classList.add(*classname)\n        else:\n            self._js.classList.add(classname)\n        return self\n\n    @property\n    def classes(self):\n        classes = self._js.classList.values()\n        return [x for x in classes]\n\n    def show_me(self):\n        self._js.scrollIntoView()\n\n    def snap(\n        self,\n        to: BaseElement | str = None,\n        width: int | None = None,\n        height: int | None = None,\n    ):\n        \"\"\"\n        Captures a snapshot of a video element. (Only available for video elements)\n\n        Inputs:\n\n            * to: element where to save the snapshot of the video frame to\n            * width: width of the image\n            * height: height of the image\n\n        Output:\n            (Element) canvas element where the video frame snapshot was drawn into\n        \"\"\"\n        if self._js.tagName != \"VIDEO\":\n            raise AttributeError(\"Snap method is only available for video Elements\")\n\n        if to is None:\n            canvas = self.create(\"canvas\")\n            if width is None:\n                width = self._js.width\n            if height is None:\n                height = self._js.height\n            canvas._js.width = width\n            canvas._js.height = height\n\n        elif isinstance(to, Element):\n            if to._js.tagName != \"CANVAS\":\n                raise TypeError(\"Element to snap to must a canvas.\")\n            canvas = to\n        elif getattr(to, \"tagName\", \"\") == \"CANVAS\":\n            canvas = Element(to)\n        elif isinstance(to, str):\n            canvas = pydom[to][0]\n            if canvas._js.tagName != \"CANVAS\":\n                raise TypeError(\"Element to snap to must a be canvas.\")\n\n        canvas.draw(self, width, height)\n\n        return canvas\n\n    def download(self, filename: str = \"snapped.png\") -> None:\n        \"\"\"Download the current element (only available for canvas elements) with the filename\n        provided in input.\n\n        Inputs:\n            * filename (str): name of the file being downloaded\n\n        Output:\n            None\n        \"\"\"\n        if self._js.tagName != \"CANVAS\":\n            raise AttributeError(\n                \"The download method is only available for canvas Elements\"\n            )\n\n        link = self.create(\"a\")\n        link._js.download = filename\n        link._js.href = self._js.toDataURL()\n        link._js.click()\n\n    def draw(self, what, width, height):\n        \"\"\"Draw `what` on the current element  (only available for canvas elements).\n\n        Inputs:\n\n            * what (canvas image source): An element to draw into the context. The specification permits any canvas\n                image source, specifically, an HTMLImageElement, an SVGImageElement, an HTMLVideoElement,\n                an HTMLCanvasElement, an ImageBitmap, an OffscreenCanvas, or a VideoFrame.\n        \"\"\"\n        if self._js.tagName != \"CANVAS\":\n            raise AttributeError(\n                \"The draw method is only available for canvas Elements\"\n            )\n\n        if isinstance(what, Element):\n            what = what._js\n\n        # https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\n        self._js.getContext(\"2d\").drawImage(what, 0, 0, width, height)\n\n\nclass OptionsProxy:\n    \"\"\"This class represents the options of a select element. It\n    allows to access to add and remove options by using the `add` and `remove` methods.\n    \"\"\"\n\n    def __init__(self, element: Element) -> None:\n        self._element = element\n        if self._element._js.tagName.lower() != \"select\":\n            raise AttributeError(\n                f\"Element {self._element._js.tagName} has no options attribute.\"\n            )\n\n    def add(\n        self,\n        value: Any = None,\n        html: str = None,\n        text: str = None,\n        before: Element | int = None,\n        **kws,\n    ) -> None:\n        \"\"\"Add a new option to the select element\"\"\"\n        # create the option element and set the attributes\n        option = document.createElement(\"option\")\n        if value is not None:\n            kws[\"value\"] = value\n        if html is not None:\n            option.innerHTML = html\n        if text is not None:\n            kws[\"text\"] = text\n\n        for key, value in kws.items():\n            option.setAttribute(key, value)\n\n        if before:\n            if isinstance(before, Element):\n                before = before._js\n\n        self._element._js.add(option, before)\n\n    def remove(self, item: int) -> None:\n        \"\"\"Remove the option at the specified index\"\"\"\n        self._element._js.remove(item)\n\n    def clear(self) -> None:\n        \"\"\"Remove all the options\"\"\"\n        for i in range(len(self)):\n            self.remove(0)\n\n    @property\n    def options(self):\n        \"\"\"Return the list of options\"\"\"\n        return [Element(opt) for opt in self._element._js.options]\n\n    @property\n    def selected(self):\n        \"\"\"Return the selected option\"\"\"\n        return self.options[self._element._js.selectedIndex]\n\n    def __iter__(self):\n        yield from self.options\n\n    def __len__(self):\n        return len(self.options)\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__} (length: {len(self)}) {self.options}\"\n\n    def __getitem__(self, key):\n        return self.options[key]\n\n\nclass StyleProxy:  # (dict):\n    def __init__(self, element: Element) -> None:\n        self._element = element\n\n    @cached_property\n    def _style(self):\n        return self._element._js.style\n\n    def __getitem__(self, key):\n        return self._style.getPropertyValue(key)\n\n    def __setitem__(self, key, value):\n        self._style.setProperty(key, value)\n\n    def remove(self, key):\n        self._style.removeProperty(key)\n\n    def set(self, **kws):\n        for k, v in kws.items():\n            self._element._js.style.setProperty(k, v)\n\n    # CSS Properties\n    # Reference: https://github.com/microsoft/TypeScript/blob/main/src/lib/dom.generated.d.ts#L3799C1-L5005C2\n    # Following prperties automatically generated from the above reference using\n    # tools/codegen_css_proxy.py\n    @property\n    def visible(self):\n        return self._element._js.style.visibility\n\n    @visible.setter\n    def visible(self, value):\n        self._element._js.style.visibility = value\n\n\nclass StyleCollection:\n    def __init__(self, collection: \"ElementCollection\") -> None:\n        self._collection = collection\n\n    def __get__(self, obj, objtype=None):\n        return obj._get_attribute(\"style\")\n\n    def __getitem__(self, key):\n        return self._collection._get_attribute(\"style\")[key]\n\n    def __setitem__(self, key, value):\n        for element in self._collection._elements:\n            element.style[key] = value\n\n    def remove(self, key):\n        for element in self._collection._elements:\n            element.style.remove(key)\n\n\nclass ElementCollection:\n    def __init__(self, elements: [Element]) -> None:\n        self._elements = elements\n        self.style = StyleCollection(self)\n\n    def __getitem__(self, key):\n        # If it's an integer we use it to access the elements in the collection\n        if isinstance(key, int):\n            return self._elements[key]\n        # If it's a slice we use it to support slice operations over the elements\n        # in the collection\n        elif isinstance(key, slice):\n            return ElementCollection(self._elements[key])\n\n        # If it's anything else (basically a string) we use it as a selector\n        # TODO: Write tests!\n        elements = self._element.querySelectorAll(key)\n        return ElementCollection([Element(el) for el in elements])\n\n    def __len__(self):\n        return len(self._elements)\n\n    def __eq__(self, obj):\n        \"\"\"Check if the element is the same as the other element by comparing\n        the underlying JS element\"\"\"\n        return isinstance(obj, ElementCollection) and obj._elements == self._elements\n\n    def _get_attribute(self, attr, index=None):\n        if index is None:\n            return [getattr(el, attr) for el in self._elements]\n\n        # As JQuery, when getting an attr, only return it for the first element\n        return getattr(self._elements[index], attr)\n\n    def _set_attribute(self, attr, value):\n        for el in self._elements:\n            setattr(el, attr, value)\n\n    @property\n    def html(self):\n        return self._get_attribute(\"html\")\n\n    @html.setter\n    def html(self, value):\n        self._set_attribute(\"html\", value)\n\n    @property\n    def value(self):\n        return self._get_attribute(\"value\")\n\n    @value.setter\n    def value(self, value):\n        self._set_attribute(\"value\", value)\n\n    @property\n    def children(self):\n        return self._elements\n\n    def __iter__(self):\n        yield from self._elements\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__} (length: {len(self._elements)}) {self._elements}\"\n\n\nclass DomScope:\n    def __getattr__(self, __name: str):\n        element = document[f\"#{__name}\"]\n        if element:\n            return element[0]\n\n\nclass PyDom(BaseElement):\n    # Add objects we want to expose to the DOM namespace since this class instance is being\n    # remapped as \"the module\" itself\n    BaseElement = BaseElement\n    Element = Element\n    ElementCollection = ElementCollection\n\n    def __init__(self):\n        # PyDom is a special case of BaseElement where we don't want to create a new JS element\n        # and it really doesn't have a need for styleproxy or parent to to call to __init__\n        # (which actually fails in MP for some reason)\n        self._js = document\n        self._parent = None\n        self._proxies = {}\n        self.ids = DomScope()\n        self.body = Element(document.body)\n        self.head = Element(document.head)\n\n    def create(self, type_, classes=None, html=None):\n        return super().create(type_, is_child=False, classes=classes, html=html)\n\n    def __getitem__(self, key):\n        elements = self._js.querySelectorAll(key)\n        if not elements:\n            return None\n        return ElementCollection([Element(el) for el in elements])\n\n\ndom = PyDom()\n",
    "ui": {
      "__init__.py": "from . import elements\n",
      "elements.py": "import inspect\nimport sys\n\nfrom pyscript import document, when, window\nfrom pyweb import JSProperty, pydom\n\n#: A flag to show if MicroPython is the current Python interpreter.\nis_micropython = \"MicroPython\" in sys.version\n\n\ndef getmembers_static(cls):\n    \"\"\"Cross-interpreter implementation of inspect.getmembers_static.\"\"\"\n\n    if is_micropython:  # pragma: no cover\n        return [(name, getattr(cls, name)) for name, _ in inspect.getmembers(cls)]\n\n    return inspect.getmembers_static(cls)\n\n\nclass ElementBase(pydom.Element):\n    tag = \"div\"\n\n    # GLOBAL ATTRIBUTES\n    # These are attribute that all elements have (this list is a subset of the official one)\n    # We are trying to capture the most used ones\n    accesskey = JSProperty(\"accesskey\")\n    autofocus = JSProperty(\"autofocus\")\n    autocapitalize = JSProperty(\"autocapitalize\")\n    className = JSProperty(\"className\")\n    contenteditable = JSProperty(\"contenteditable\")\n    draggable = JSProperty(\"draggable\")\n    enterkeyhint = JSProperty(\"enterkeyhint\")\n    hidden = JSProperty(\"hidden\")\n    id = JSProperty(\"id\")\n    lang = JSProperty(\"lang\")\n    nonce = JSProperty(\"nonce\")\n    part = JSProperty(\"part\")\n    popover = JSProperty(\"popover\")\n    slot = JSProperty(\"slot\")\n    spellcheck = JSProperty(\"spellcheck\")\n    tabindex = JSProperty(\"tabindex\")\n    title = JSProperty(\"title\")\n    translate = JSProperty(\"translate\")\n    virtualkeyboardpolicy = JSProperty(\"virtualkeyboardpolicy\")\n\n    def __init__(self, style=None, **kwargs):\n        super().__init__(document.createElement(self.tag))\n\n        # set all the style properties provided in input\n        if isinstance(style, dict):\n            for key, value in style.items():\n                self.style[key] = value\n        elif style is None:\n            pass\n        else:\n            raise ValueError(\n                f\"Style should be a dictionary, received {style} (type {type(style)}) instead.\"\n            )\n\n        # IMPORTANT!!! This is used to auto-harvest all input arguments and set them as properties\n        self._init_properties(**kwargs)\n\n    def _init_properties(self, **kwargs):\n        \"\"\"Set all the properties (of type JSProperties) provided in input as properties\n        of the class instance.\n\n        Args:\n            **kwargs: The properties to set\n        \"\"\"\n        # Look at all the properties of the class and see if they were provided in kwargs\n        for attr_name, attr in getmembers_static(self.__class__):\n            # For each one, actually check if it is a property of the class and set it\n            if isinstance(attr, JSProperty) and attr_name in kwargs:\n                try:\n                    setattr(self, attr_name, kwargs[attr_name])\n                except Exception as e:\n                    print(f\"Error setting {attr_name} to {kwargs[attr_name]}: {e}\")\n                    raise\n\n\nclass TextElementBase(ElementBase):\n    def __init__(self, content=None, style=None, **kwargs):\n        super().__init__(style=style, **kwargs)\n\n        # If it's an element, append the element\n        if isinstance(content, pydom.Element):\n            self.append(content)\n        # If it's a list of elements\n        elif isinstance(content, list):\n            for item in content:\n                self.append(item)\n        # If the content wasn't set just ignore\n        elif content is None:\n            pass\n        else:\n            # Otherwise, set content as the html of the element\n            self.html = content\n\n\n# IMPORTANT: For all HTML components defined below, we are not mapping all\n# available attributes, just the global and the most common ones.\n# If you need to access a specific attribute, you can always use the `_js.<attribute>`\nclass a(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\"\"\"\n\n    tag = \"a\"\n\n    download = JSProperty(\"download\")\n    href = JSProperty(\"href\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    rel = JSProperty(\"rel\")\n    target = JSProperty(\"target\")\n    type = JSProperty(\"type\")\n\n\nclass abbr(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr\"\"\"\n\n    tag = \"abbr\"\n\n\nclass address(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address\"\"\"\n\n    tag = \"address\"\n\n\nclass area(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area\"\"\"\n\n    tag = \"area\"\n\n    alt = JSProperty(\"alt\")\n    coords = JSProperty(\"coords\")\n    download = JSProperty(\"download\")\n    href = JSProperty(\"href\")\n    ping = JSProperty(\"ping\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    rel = JSProperty(\"rel\")\n    shape = JSProperty(\"shape\")\n    target = JSProperty(\"target\")\n\n\nclass article(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article\"\"\"\n\n    tag = \"article\"\n\n\nclass aside(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside\"\"\"\n\n    tag = \"aside\"\n\n\nclass audio(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio\"\"\"\n\n    tag = \"audio\"\n\n    autoplay = JSProperty(\"autoplay\")\n    controls = JSProperty(\"controls\")\n    controlslist = JSProperty(\"controlslist\")\n    crossorigin = JSProperty(\"crossorigin\")\n    disableremoteplayback = JSProperty(\"disableremoteplayback\")\n    loop = JSProperty(\"loop\")\n    muted = JSProperty(\"muted\")\n    preload = JSProperty(\"preload\")\n    src = JSProperty(\"src\")\n\n\nclass b(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b\"\"\"\n\n    tag = \"b\"\n\n\nclass blockquote(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote\"\"\"\n\n    tag = \"blockquote\"\n\n    cite = JSProperty(\"cite\")\n\n\nclass br(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br\"\"\"\n\n    tag = \"br\"\n\n\nclass button(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button\"\"\"\n\n    tag = \"button\"\n\n    autofocus = JSProperty(\"autofocus\")\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    formaction = JSProperty(\"formaction\")\n    formenctype = JSProperty(\"formenctype\")\n    formmethod = JSProperty(\"formmethod\")\n    formnovalidate = JSProperty(\"formnovalidate\")\n    formtarget = JSProperty(\"formtarget\")\n    name = JSProperty(\"name\")\n    type = JSProperty(\"type\")\n    value = JSProperty(\"value\")\n\n\nclass canvas(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas\"\"\"\n\n    tag = \"canvas\"\n\n    height = JSProperty(\"height\")\n    width = JSProperty(\"width\")\n\n\nclass caption(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\"\"\"\n\n    tag = \"caption\"\n\n\nclass cite(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite\"\"\"\n\n    tag = \"cite\"\n\n\nclass code(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code\"\"\"\n\n    tag = \"code\"\n\n\nclass data(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data\"\"\"\n\n    tag = \"data\"\n\n    value = JSProperty(\"value\")\n\n\nclass datalist(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist\"\"\"\n\n    tag = \"datalist\"\n\n\nclass dd(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd\"\"\"\n\n    tag = \"dd\"\n\n\nclass del_(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del\"\"\"\n\n    tag = \"del\"\n\n    cite = JSProperty(\"cite\")\n    datetime = JSProperty(\"datetime\")\n\n\nclass details(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details\"\"\"\n\n    tag = \"details\"\n\n    open = JSProperty(\"open\")\n\n\nclass dialog(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog\"\"\"\n\n    tag = \"dialog\"\n\n    open = JSProperty(\"open\")\n\n\nclass div(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\"\"\"\n\n    tag = \"div\"\n\n\nclass dl(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl\"\"\"\n\n    tag = \"dl\"\n\n    value = JSProperty(\"value\")\n\n\nclass dt(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt\"\"\"\n\n    tag = \"dt\"\n\n\nclass em(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em\"\"\"\n\n    tag = \"em\"\n\n\nclass embed(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed\"\"\"\n\n    tag = \"embed\"\n\n    height = JSProperty(\"height\")\n    src = JSProperty(\"src\")\n    type = JSProperty(\"type\")\n    width = JSProperty(\"width\")\n\n\nclass fieldset(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset\"\"\"\n\n    tag = \"fieldset\"\n\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    name = JSProperty(\"name\")\n\n\nclass figcaption(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption\"\"\"\n\n    tag = \"figcaption\"\n\n\nclass figure(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure\"\"\"\n\n    tag = \"figure\"\n\n\nclass footer(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\"\"\"\n\n    tag = \"footer\"\n\n\nclass form(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\"\"\"\n\n    tag = \"form\"\n\n    accept_charset = JSProperty(\"accept-charset\")\n    action = JSProperty(\"action\")\n    autocapitalize = JSProperty(\"autocapitalize\")\n    autocomplete = JSProperty(\"autocomplete\")\n    enctype = JSProperty(\"enctype\")\n    name = JSProperty(\"name\")\n    method = JSProperty(\"method\")\n    nonvalidate = JSProperty(\"nonvalidate\")\n    rel = JSProperty(\"rel\")\n    target = JSProperty(\"target\")\n\n\nclass h1(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1\"\"\"\n\n    tag = \"h1\"\n\n\nclass h2(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2\"\"\"\n\n    tag = \"h2\"\n\n\nclass h3(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3\"\"\"\n\n    tag = \"h3\"\n\n\nclass h4(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4\"\"\"\n\n    tag = \"h4\"\n\n\nclass h5(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5\"\"\"\n\n    tag = \"h5\"\n\n\nclass h6(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6\"\"\"\n\n    tag = \"h6\"\n\n\nclass header(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header\"\"\"\n\n    tag = \"header\"\n\n\nclass hgroup(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup\"\"\"\n\n    tag = \"hgroup\"\n\n\nclass hr(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr\"\"\"\n\n    tag = \"hr\"\n\n\nclass i(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i\"\"\"\n\n    tag = \"i\"\n\n\nclass iframe(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe\"\"\"\n\n    tag = \"iframe\"\n\n    allow = JSProperty(\"allow\")\n    allowfullscreen = JSProperty(\"allowfullscreen\")\n    height = JSProperty(\"height\")\n    loading = JSProperty(\"loading\")\n    name = JSProperty(\"name\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    sandbox = JSProperty(\"sandbox\")\n    src = JSProperty(\"src\")\n    srcdoc = JSProperty(\"srcdoc\")\n    width = JSProperty(\"width\")\n\n\nclass img(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\"\"\"\n\n    tag = \"img\"\n\n    alt = JSProperty(\"alt\")\n    crossorigin = JSProperty(\"crossorigin\")\n    decoding = JSProperty(\"decoding\")\n    fetchpriority = JSProperty(\"fetchpriority\")\n    height = JSProperty(\"height\")\n    ismap = JSProperty(\"ismap\")\n    loading = JSProperty(\"loading\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    sizes = JSProperty(\"sizes\")\n    src = JSProperty(\"src\")\n    width = JSProperty(\"width\")\n\n\n# NOTE: Input is a reserved keyword in Python, so we use input_ instead\nclass input_(ElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\"\"\"\n\n    tag = \"input\"\n\n    accept = JSProperty(\"accept\")\n    alt = JSProperty(\"alt\")\n    autofocus = JSProperty(\"autofocus\")\n    capture = JSProperty(\"capture\")\n    checked = JSProperty(\"checked\")\n    dirname = JSProperty(\"dirname\")\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    formaction = JSProperty(\"formaction\")\n    formenctype = JSProperty(\"formenctype\")\n    formmethod = JSProperty(\"formmethod\")\n    formnovalidate = JSProperty(\"formnovalidate\")\n    formtarget = JSProperty(\"formtarget\")\n    height = JSProperty(\"height\")\n    list = JSProperty(\"list\")\n    max = JSProperty(\"max\")\n    maxlength = JSProperty(\"maxlength\")\n    min = JSProperty(\"min\")\n    minlength = JSProperty(\"minlength\")\n    multiple = JSProperty(\"multiple\")\n    name = JSProperty(\"name\")\n    pattern = JSProperty(\"pattern\")\n    placeholder = JSProperty(\"placeholder\")\n    popovertarget = JSProperty(\"popovertarget\")\n    popovertargetaction = JSProperty(\"popovertargetaction\")\n    readonly = JSProperty(\"readonly\")\n    required = JSProperty(\"required\")\n    size = JSProperty(\"size\")\n    src = JSProperty(\"src\")\n    step = JSProperty(\"step\")\n    type = JSProperty(\"type\")\n    value = JSProperty(\"value\")\n    width = JSProperty(\"width\")\n\n\nclass ins(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins\"\"\"\n\n    tag = \"ins\"\n\n    cite = JSProperty(\"cite\")\n    datetime = JSProperty(\"datetime\")\n\n\nclass kbd(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd\"\"\"\n\n    tag = \"kbd\"\n\n\nclass label(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label\"\"\"\n\n    tag = \"label\"\n\n    for_ = JSProperty(\"for\")\n\n\nclass legend(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend\"\"\"\n\n    tag = \"legend\"\n\n\nclass li(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\"\"\"\n\n    tag = \"li\"\n\n    value = JSProperty(\"value\")\n\n\nclass link(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\"\"\"\n\n    tag = \"link\"\n\n    as_ = JSProperty(\"as\")\n    crossorigin = JSProperty(\"crossorigin\")\n    disabled = JSProperty(\"disabled\")\n    fetchpriority = JSProperty(\"fetchpriority\")\n    href = JSProperty(\"href\")\n    imagesizes = JSProperty(\"imagesizes\")\n    imagesrcset = JSProperty(\"imagesrcset\")\n    integrity = JSProperty(\"integrity\")\n    media = JSProperty(\"media\")\n    rel = JSProperty(\"rel\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    sizes = JSProperty(\"sizes\")\n    title = JSProperty(\"title\")\n    type = JSProperty(\"type\")\n\n\nclass main(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main\"\"\"\n\n    tag = \"main\"\n\n\nclass map_(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map\"\"\"\n\n    tag = \"map\"\n\n    name = JSProperty(\"name\")\n\n\nclass mark(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark\"\"\"\n\n    tag = \"mark\"\n\n\nclass menu(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu\"\"\"\n\n    tag = \"menu\"\n\n\nclass meter(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter\"\"\"\n\n    tag = \"meter\"\n\n    form = JSProperty(\"form\")\n    high = JSProperty(\"high\")\n    low = JSProperty(\"low\")\n    max = JSProperty(\"max\")\n    min = JSProperty(\"min\")\n    optimum = JSProperty(\"optimum\")\n    value = JSProperty(\"value\")\n\n\nclass nav(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav\"\"\"\n\n    tag = \"nav\"\n\n\nclass object_(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object\"\"\"\n\n    tag = \"object\"\n\n    data = JSProperty(\"data\")\n    form = JSProperty(\"form\")\n    height = JSProperty(\"height\")\n    name = JSProperty(\"name\")\n    type = JSProperty(\"type\")\n    usemap = JSProperty(\"usemap\")\n    width = JSProperty(\"width\")\n\n\nclass ol(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\"\"\"\n\n    tag = \"ol\"\n\n    reversed = JSProperty(\"reversed\")\n    start = JSProperty(\"start\")\n    type = JSProperty(\"type\")\n\n\nclass optgroup(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup\"\"\"\n\n    tag = \"optgroup\"\n\n    disabled = JSProperty(\"disabled\")\n    label = JSProperty(\"label\")\n\n\nclass option(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\"\"\"\n\n    tag = \"option\"\n\n    disabled = JSProperty(\"value\")\n    label = JSProperty(\"label\")\n    selected = JSProperty(\"selected\")\n    value = JSProperty(\"value\")\n\n\nclass output(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output\"\"\"\n\n    tag = \"output\"\n\n    for_ = JSProperty(\"for\")\n    form = JSProperty(\"form\")\n    name = JSProperty(\"name\")\n\n\nclass p(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p\"\"\"\n\n    tag = \"p\"\n\n\nclass picture(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture\"\"\"\n\n    tag = \"picture\"\n\n\nclass pre(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre\"\"\"\n\n    tag = \"pre\"\n\n\nclass progress(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress\"\"\"\n\n    tag = \"progress\"\n\n    max = JSProperty(\"max\")\n    value = JSProperty(\"value\")\n\n\nclass q(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q\"\"\"\n\n    tag = \"q\"\n\n    cite = JSProperty(\"cite\")\n\n\nclass s(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s\"\"\"\n\n    tag = \"s\"\n\n\nclass script(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\"\"\"\n\n    tag = \"script\"\n\n    # Let's add async manually since it's a reserved keyword in Python\n    async_ = JSProperty(\"async\")\n    blocking = JSProperty(\"blocking\")\n    crossorigin = JSProperty(\"crossorigin\")\n    defer = JSProperty(\"defer\")\n    fetchpriority = JSProperty(\"fetchpriority\")\n    integrity = JSProperty(\"integrity\")\n    nomodule = JSProperty(\"nomodule\")\n    nonce = JSProperty(\"nonce\")\n    referrerpolicy = JSProperty(\"referrerpolicy\")\n    src = JSProperty(\"src\")\n    type = JSProperty(\"type\")\n\n\nclass section(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section\"\"\"\n\n    tag = \"section\"\n\n\nclass select(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\"\"\"\n\n    tag = \"select\"\n\n\nclass small(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small\"\"\"\n\n    tag = \"small\"\n\n\nclass source(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\"\"\"\n\n    tag = \"source\"\n\n    media = JSProperty(\"media\")\n    sizes = JSProperty(\"sizes\")\n    src = JSProperty(\"src\")\n    srcset = JSProperty(\"srcset\")\n    type = JSProperty(\"type\")\n\n\nclass span(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span\"\"\"\n\n    tag = \"span\"\n\n\nclass strong(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong\"\"\"\n\n    tag = \"strong\"\n\n\nclass style(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style\"\"\"\n\n    tag = \"style\"\n\n    blocking = JSProperty(\"blocking\")\n    media = JSProperty(\"media\")\n    nonce = JSProperty(\"nonce\")\n    title = JSProperty(\"title\")\n\n\nclass sub(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub\"\"\"\n\n    tag = \"sub\"\n\n\nclass summary(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary\"\"\"\n\n    tag = \"summary\"\n\n\nclass sup(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup\"\"\"\n\n    tag = \"sup\"\n\n\nclass table(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\"\"\"\n\n    tag = \"table\"\n\n\nclass tbody(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\"\"\"\n\n    tag = \"tbody\"\n\n\nclass td(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"\"\"\n\n    tag = \"td\"\n\n    colspan = JSProperty(\"colspan\")\n    headers = JSProperty(\"headers\")\n    rowspan = JSProperty(\"rowspan\")\n\n\nclass template(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\"\"\"\n\n    tag = \"template\"\n\n    shadowrootmode = JSProperty(\"shadowrootmode\")\n\n\nclass textarea(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea\"\"\"\n\n    tag = \"textarea\"\n\n    autocapitalize = JSProperty(\"autocapitalize\")\n    autocomplete = JSProperty(\"autocomplete\")\n    autofocus = JSProperty(\"autofocus\")\n    cols = JSProperty(\"cols\")\n    dirname = JSProperty(\"dirname\")\n    disabled = JSProperty(\"disabled\")\n    form = JSProperty(\"form\")\n    maxlength = JSProperty(\"maxlength\")\n    minlength = JSProperty(\"minlength\")\n    name = JSProperty(\"name\")\n    placeholder = JSProperty(\"placeholder\")\n    readonly = JSProperty(\"readonly\")\n    required = JSProperty(\"required\")\n    rows = JSProperty(\"rows\")\n    spellcheck = JSProperty(\"spellcheck\")\n    wrap = JSProperty(\"wrap\")\n\n\nclass tfoot(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\"\"\"\n\n    tag = \"tfoot\"\n\n\nclass th(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\"\"\"\n\n    tag = \"th\"\n\n\nclass thead(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\"\"\"\n\n    tag = \"thead\"\n\n\nclass time(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time\"\"\"\n\n    tag = \"time\"\n\n    datetime = JSProperty(\"datetime\")\n\n\nclass title(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title\"\"\"\n\n    tag = \"title\"\n\n\nclass tr(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr\"\"\"\n\n    tag = \"tr\"\n\n    abbr = JSProperty(\"abbr\")\n    colspan = JSProperty(\"colspan\")\n    headers = JSProperty(\"headers\")\n    rowspan = JSProperty(\"rowspan\")\n    scope = JSProperty(\"scope\")\n\n\nclass track(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track\"\"\"\n\n    tag = \"track\"\n\n    default = JSProperty(\"default\")\n    kind = JSProperty(\"kind\")\n    label = JSProperty(\"label\")\n    src = JSProperty(\"src\")\n    srclang = JSProperty(\"srclang\")\n\n\nclass u(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u\"\"\"\n\n    tag = \"u\"\n\n\nclass ul(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\"\"\"\n\n    tag = \"ul\"\n\n\nclass var(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var\"\"\"\n\n    tag = \"var\"\n\n\nclass video(TextElementBase):\n    \"\"\"Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video\"\"\"\n\n    tag = \"video\"\n\n    autoplay = JSProperty(\"autoplay\")\n    controls = JSProperty(\"controls\")\n    crossorigin = JSProperty(\"crossorigin\")\n    disablepictureinpicture = JSProperty(\"disablepictureinpicture\")\n    disableremoteplayback = JSProperty(\"disableremoteplayback\")\n    height = JSProperty(\"height\")\n    loop = JSProperty(\"loop\")\n    muted = JSProperty(\"muted\")\n    playsinline = JSProperty(\"playsinline\")\n    poster = JSProperty(\"poster\")\n    preload = JSProperty(\"preload\")\n    src = JSProperty(\"src\")\n    width = JSProperty(\"width\")\n\n\n# Custom Elements\nclass grid(TextElementBase):\n    tag = \"div\"\n\n    def __init__(self, layout, content=None, gap=None, **kwargs):\n        super().__init__(content, **kwargs)\n        self.style[\"display\"] = \"grid\"\n        self.style[\"grid-template-columns\"] = layout\n\n        # TODO: This should be a property\n        if not gap is None:\n            self.style[\"gap\"] = gap\n"
    }
  }
};
